{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "0beadd52",
   "metadata": {
    "papermill": {
     "duration": 0.01023,
     "end_time": "2024-08-14T15:23:14.414359",
     "exception": false,
     "start_time": "2024-08-14T15:23:14.404129",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# **GMRRNet funcions:** \n",
    "\n",
    "Este cuaderno documenta todas las funciones y clases utilizadas para el correcto y buen funcionamiento del modelo."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "926f3f63",
   "metadata": {
    "papermill": {
     "duration": 0.009373,
     "end_time": "2024-08-14T15:23:14.433423",
     "exception": false,
     "start_time": "2024-08-14T15:23:14.424050",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# **Instalamos lo necesario e importamos librerÃ­as**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "3630bc6b",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2024-08-14T15:23:14.453489Z",
     "iopub.status.busy": "2024-08-14T15:23:14.453197Z",
     "iopub.status.idle": "2024-08-14T15:24:16.088905Z",
     "shell.execute_reply": "2024-08-14T15:24:16.087697Z"
    },
    "papermill": {
     "duration": 61.648546,
     "end_time": "2024-08-14T15:24:16.091402",
     "exception": false,
     "start_time": "2024-08-14T15:23:14.442856",
     "status": "completed"
    },
    "scrolled": true,
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Collecting git+https://github.com/UN-GCPDS/python-gcpds.databases\r\n",
      "  Cloning https://github.com/UN-GCPDS/python-gcpds.databases to /tmp/pip-req-build-6jokdom9\r\n",
      "  Running command git clone --filter=blob:none --quiet https://github.com/UN-GCPDS/python-gcpds.databases /tmp/pip-req-build-6jokdom9\r\n",
      "  Resolved https://github.com/UN-GCPDS/python-gcpds.databases to commit c35637e1a19d7cd21656496339c1dedae6714916\r\n",
      "  Preparing metadata (setup.py) ... \u001b[?25ldone\r\n",
      "\u001b[?25hRequirement already satisfied: numpy in /opt/conda/lib/python3.10/site-packages (from gcpds-databases==0.2) (1.26.4)\r\n",
      "Requirement already satisfied: scipy in /opt/conda/lib/python3.10/site-packages (from gcpds-databases==0.2) (1.11.4)\r\n",
      "Requirement already satisfied: matplotlib in /opt/conda/lib/python3.10/site-packages (from gcpds-databases==0.2) (3.7.5)\r\n",
      "Requirement already satisfied: mne in /opt/conda/lib/python3.10/site-packages (from gcpds-databases==0.2) (1.7.1)\r\n",
      "Requirement already satisfied: tables in /opt/conda/lib/python3.10/site-packages (from gcpds-databases==0.2) (3.9.2)\r\n",
      "Requirement already satisfied: tqdm in /opt/conda/lib/python3.10/site-packages (from gcpds-databases==0.2) (4.66.4)\r\n",
      "Requirement already satisfied: pandas in /opt/conda/lib/python3.10/site-packages (from gcpds-databases==0.2) (2.2.2)\r\n",
      "Collecting gdown (from gcpds-databases==0.2)\r\n",
      "  Downloading gdown-5.2.0-py3-none-any.whl.metadata (5.8 kB)\r\n",
      "Requirement already satisfied: beautifulsoup4 in /opt/conda/lib/python3.10/site-packages (from gdown->gcpds-databases==0.2) (4.12.2)\r\n",
      "Requirement already satisfied: filelock in /opt/conda/lib/python3.10/site-packages (from gdown->gcpds-databases==0.2) (3.13.1)\r\n",
      "Requirement already satisfied: requests[socks] in /opt/conda/lib/python3.10/site-packages (from gdown->gcpds-databases==0.2) (2.32.3)\r\n",
      "Requirement already satisfied: contourpy>=1.0.1 in /opt/conda/lib/python3.10/site-packages (from matplotlib->gcpds-databases==0.2) (1.2.0)\r\n",
      "Requirement already satisfied: cycler>=0.10 in /opt/conda/lib/python3.10/site-packages (from matplotlib->gcpds-databases==0.2) (0.12.1)\r\n",
      "Requirement already satisfied: fonttools>=4.22.0 in /opt/conda/lib/python3.10/site-packages (from matplotlib->gcpds-databases==0.2) (4.47.0)\r\n",
      "Requirement already satisfied: kiwisolver>=1.0.1 in /opt/conda/lib/python3.10/site-packages (from matplotlib->gcpds-databases==0.2) (1.4.5)\r\n",
      "Requirement already satisfied: packaging>=20.0 in /opt/conda/lib/python3.10/site-packages (from matplotlib->gcpds-databases==0.2) (21.3)\r\n",
      "Requirement already satisfied: pillow>=6.2.0 in /opt/conda/lib/python3.10/site-packages (from matplotlib->gcpds-databases==0.2) (9.5.0)\r\n",
      "Requirement already satisfied: pyparsing>=2.3.1 in /opt/conda/lib/python3.10/site-packages (from matplotlib->gcpds-databases==0.2) (3.1.1)\r\n",
      "Requirement already satisfied: python-dateutil>=2.7 in /opt/conda/lib/python3.10/site-packages (from matplotlib->gcpds-databases==0.2) (2.9.0.post0)\r\n",
      "Requirement already satisfied: decorator in /opt/conda/lib/python3.10/site-packages (from mne->gcpds-databases==0.2) (5.1.1)\r\n",
      "Requirement already satisfied: jinja2 in /opt/conda/lib/python3.10/site-packages (from mne->gcpds-databases==0.2) (3.1.2)\r\n",
      "Requirement already satisfied: lazy-loader>=0.3 in /opt/conda/lib/python3.10/site-packages (from mne->gcpds-databases==0.2) (0.3)\r\n",
      "Requirement already satisfied: pooch>=1.5 in /opt/conda/lib/python3.10/site-packages (from mne->gcpds-databases==0.2) (1.8.2)\r\n",
      "Requirement already satisfied: pytz>=2020.1 in /opt/conda/lib/python3.10/site-packages (from pandas->gcpds-databases==0.2) (2023.3.post1)\r\n",
      "Requirement already satisfied: tzdata>=2022.7 in /opt/conda/lib/python3.10/site-packages (from pandas->gcpds-databases==0.2) (2023.4)\r\n",
      "Requirement already satisfied: numexpr>=2.6.2 in /opt/conda/lib/python3.10/site-packages (from tables->gcpds-databases==0.2) (2.10.1)\r\n",
      "Requirement already satisfied: py-cpuinfo in /opt/conda/lib/python3.10/site-packages (from tables->gcpds-databases==0.2) (9.0.0)\r\n",
      "Requirement already satisfied: blosc2>=2.3.0 in /opt/conda/lib/python3.10/site-packages (from tables->gcpds-databases==0.2) (2.7.0)\r\n",
      "Requirement already satisfied: ndindex>=1.4 in /opt/conda/lib/python3.10/site-packages (from blosc2>=2.3.0->tables->gcpds-databases==0.2) (1.8)\r\n",
      "Requirement already satisfied: msgpack in /opt/conda/lib/python3.10/site-packages (from blosc2>=2.3.0->tables->gcpds-databases==0.2) (1.0.7)\r\n",
      "Requirement already satisfied: platformdirs>=2.5.0 in /opt/conda/lib/python3.10/site-packages (from pooch>=1.5->mne->gcpds-databases==0.2) (3.11.0)\r\n",
      "Requirement already satisfied: six>=1.5 in /opt/conda/lib/python3.10/site-packages (from python-dateutil>=2.7->matplotlib->gcpds-databases==0.2) (1.16.0)\r\n",
      "Requirement already satisfied: soupsieve>1.2 in /opt/conda/lib/python3.10/site-packages (from beautifulsoup4->gdown->gcpds-databases==0.2) (2.5)\r\n",
      "Requirement already satisfied: MarkupSafe>=2.0 in /opt/conda/lib/python3.10/site-packages (from jinja2->mne->gcpds-databases==0.2) (2.1.3)\r\n",
      "Requirement already satisfied: charset-normalizer<4,>=2 in /opt/conda/lib/python3.10/site-packages (from requests[socks]->gdown->gcpds-databases==0.2) (3.3.2)\r\n",
      "Requirement already satisfied: idna<4,>=2.5 in /opt/conda/lib/python3.10/site-packages (from requests[socks]->gdown->gcpds-databases==0.2) (3.6)\r\n",
      "Requirement already satisfied: urllib3<3,>=1.21.1 in /opt/conda/lib/python3.10/site-packages (from requests[socks]->gdown->gcpds-databases==0.2) (1.26.18)\r\n",
      "Requirement already satisfied: certifi>=2017.4.17 in /opt/conda/lib/python3.10/site-packages (from requests[socks]->gdown->gcpds-databases==0.2) (2024.7.4)\r\n",
      "Requirement already satisfied: PySocks!=1.5.7,>=1.5.6 in /opt/conda/lib/python3.10/site-packages (from requests[socks]->gdown->gcpds-databases==0.2) (1.7.1)\r\n",
      "Downloading gdown-5.2.0-py3-none-any.whl (18 kB)\r\n",
      "Building wheels for collected packages: gcpds-databases\r\n",
      "  Building wheel for gcpds-databases (setup.py) ... \u001b[?25l-\b \bdone\r\n",
      "\u001b[?25h  Created wheel for gcpds-databases: filename=gcpds_databases-0.2-py3-none-any.whl size=94504 sha256=44522ac1987c8d3e79c07831a5dbd932e7ab25e6a11deb130882ef87dc8bfd50\r\n",
      "  Stored in directory: /tmp/pip-ephem-wheel-cache-9k3bfumh/wheels/8e/66/a7/91b78b1787a3e4d17cb82ea2da67845aa9389012c0ed8280b0\r\n",
      "Successfully built gcpds-databases\r\n",
      "Installing collected packages: gdown, gcpds-databases\r\n",
      "Successfully installed gcpds-databases-0.2 gdown-5.2.0\r\n",
      "Collecting git+https://github.com/UN-GCPDS/python-gcpds.EEG_Tensorflow_models\r\n",
      "  Cloning https://github.com/UN-GCPDS/python-gcpds.EEG_Tensorflow_models to /tmp/pip-req-build-5nslixpb\r\n",
      "  Running command git clone --filter=blob:none --quiet https://github.com/UN-GCPDS/python-gcpds.EEG_Tensorflow_models /tmp/pip-req-build-5nslixpb\r\n",
      "  Resolved https://github.com/UN-GCPDS/python-gcpds.EEG_Tensorflow_models to commit 975885b1f6814fd5958199919b33e02a6a9aa152\r\n",
      "  Preparing metadata (setup.py) ... \u001b[?25ldone\r\n",
      "\u001b[?25hCollecting braindecode==0.7 (from EEG_Tensorflow_models==0.2)\r\n",
      "  Downloading Braindecode-0.7-py3-none-any.whl.metadata (6.8 kB)\r\n",
      "Collecting moabb (from EEG_Tensorflow_models==0.2)\r\n",
      "  Downloading moabb-1.1.0-py3-none-any.whl.metadata (16 kB)\r\n",
      "Collecting tensorflow-addons (from EEG_Tensorflow_models==0.2)\r\n",
      "  Downloading tensorflow_addons-0.23.0-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (1.8 kB)\r\n",
      "Requirement already satisfied: tensorflow>=2.8 in /opt/conda/lib/python3.10/site-packages (from EEG_Tensorflow_models==0.2) (2.15.0)\r\n",
      "Collecting tf-keras-vis (from EEG_Tensorflow_models==0.2)\r\n",
      "  Downloading tf_keras_vis-0.8.7-py3-none-any.whl.metadata (10 kB)\r\n",
      "Requirement already satisfied: mne in /opt/conda/lib/python3.10/site-packages (from braindecode==0.7->EEG_Tensorflow_models==0.2) (1.7.1)\r\n",
      "Requirement already satisfied: numpy in /opt/conda/lib/python3.10/site-packages (from braindecode==0.7->EEG_Tensorflow_models==0.2) (1.26.4)\r\n",
      "Requirement already satisfied: pandas in /opt/conda/lib/python3.10/site-packages (from braindecode==0.7->EEG_Tensorflow_models==0.2) (2.2.2)\r\n",
      "Requirement already satisfied: scipy in /opt/conda/lib/python3.10/site-packages (from braindecode==0.7->EEG_Tensorflow_models==0.2) (1.11.4)\r\n",
      "Requirement already satisfied: matplotlib in /opt/conda/lib/python3.10/site-packages (from braindecode==0.7->EEG_Tensorflow_models==0.2) (3.7.5)\r\n",
      "Requirement already satisfied: h5py in /opt/conda/lib/python3.10/site-packages (from braindecode==0.7->EEG_Tensorflow_models==0.2) (3.10.0)\r\n",
      "Collecting skorch (from braindecode==0.7->EEG_Tensorflow_models==0.2)\r\n",
      "  Downloading skorch-1.0.0-py3-none-any.whl.metadata (11 kB)\r\n",
      "Requirement already satisfied: absl-py>=1.0.0 in /opt/conda/lib/python3.10/site-packages (from tensorflow>=2.8->EEG_Tensorflow_models==0.2) (1.4.0)\r\n",
      "Requirement already satisfied: astunparse>=1.6.0 in /opt/conda/lib/python3.10/site-packages (from tensorflow>=2.8->EEG_Tensorflow_models==0.2) (1.6.3)\r\n",
      "Requirement already satisfied: flatbuffers>=23.5.26 in /opt/conda/lib/python3.10/site-packages (from tensorflow>=2.8->EEG_Tensorflow_models==0.2) (23.5.26)\r\n",
      "Requirement already satisfied: gast!=0.5.0,!=0.5.1,!=0.5.2,>=0.2.1 in /opt/conda/lib/python3.10/site-packages (from tensorflow>=2.8->EEG_Tensorflow_models==0.2) (0.5.4)\r\n",
      "Requirement already satisfied: google-pasta>=0.1.1 in /opt/conda/lib/python3.10/site-packages (from tensorflow>=2.8->EEG_Tensorflow_models==0.2) (0.2.0)\r\n",
      "Requirement already satisfied: libclang>=13.0.0 in /opt/conda/lib/python3.10/site-packages (from tensorflow>=2.8->EEG_Tensorflow_models==0.2) (16.0.6)\r\n",
      "Requirement already satisfied: ml-dtypes~=0.2.0 in /opt/conda/lib/python3.10/site-packages (from tensorflow>=2.8->EEG_Tensorflow_models==0.2) (0.2.0)\r\n",
      "Requirement already satisfied: opt-einsum>=2.3.2 in /opt/conda/lib/python3.10/site-packages (from tensorflow>=2.8->EEG_Tensorflow_models==0.2) (3.3.0)\r\n",
      "Requirement already satisfied: packaging in /opt/conda/lib/python3.10/site-packages (from tensorflow>=2.8->EEG_Tensorflow_models==0.2) (21.3)\r\n",
      "Requirement already satisfied: protobuf!=4.21.0,!=4.21.1,!=4.21.2,!=4.21.3,!=4.21.4,!=4.21.5,<5.0.0dev,>=3.20.3 in /opt/conda/lib/python3.10/site-packages (from tensorflow>=2.8->EEG_Tensorflow_models==0.2) (3.20.3)\r\n",
      "Requirement already satisfied: setuptools in /opt/conda/lib/python3.10/site-packages (from tensorflow>=2.8->EEG_Tensorflow_models==0.2) (69.0.3)\r\n",
      "Requirement already satisfied: six>=1.12.0 in /opt/conda/lib/python3.10/site-packages (from tensorflow>=2.8->EEG_Tensorflow_models==0.2) (1.16.0)\r\n",
      "Requirement already satisfied: termcolor>=1.1.0 in /opt/conda/lib/python3.10/site-packages (from tensorflow>=2.8->EEG_Tensorflow_models==0.2) (2.4.0)\r\n",
      "Requirement already satisfied: typing-extensions>=3.6.6 in /opt/conda/lib/python3.10/site-packages (from tensorflow>=2.8->EEG_Tensorflow_models==0.2) (4.9.0)\r\n",
      "Requirement already satisfied: wrapt<1.15,>=1.11.0 in /opt/conda/lib/python3.10/site-packages (from tensorflow>=2.8->EEG_Tensorflow_models==0.2) (1.14.1)\r\n",
      "Requirement already satisfied: tensorflow-io-gcs-filesystem>=0.23.1 in /opt/conda/lib/python3.10/site-packages (from tensorflow>=2.8->EEG_Tensorflow_models==0.2) (0.35.0)\r\n",
      "Requirement already satisfied: grpcio<2.0,>=1.24.3 in /opt/conda/lib/python3.10/site-packages (from tensorflow>=2.8->EEG_Tensorflow_models==0.2) (1.60.0)\r\n",
      "Requirement already satisfied: tensorboard<2.16,>=2.15 in /opt/conda/lib/python3.10/site-packages (from tensorflow>=2.8->EEG_Tensorflow_models==0.2) (2.15.1)\r\n",
      "Requirement already satisfied: tensorflow-estimator<2.16,>=2.15.0 in /opt/conda/lib/python3.10/site-packages (from tensorflow>=2.8->EEG_Tensorflow_models==0.2) (2.15.0)\r\n",
      "Collecting keras<2.16,>=2.15.0 (from tensorflow>=2.8->EEG_Tensorflow_models==0.2)\r\n",
      "  Downloading keras-2.15.0-py3-none-any.whl.metadata (2.4 kB)\r\n",
      "Requirement already satisfied: PyYAML<7.0,>=6.0 in /opt/conda/lib/python3.10/site-packages (from moabb->EEG_Tensorflow_models==0.2) (6.0.1)\r\n",
      "Collecting coverage<8.0.0,>=7.0.1 (from moabb->EEG_Tensorflow_models==0.2)\r\n",
      "  Downloading coverage-7.6.1-cp310-cp310-manylinux_2_5_x86_64.manylinux1_x86_64.manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (8.3 kB)\r\n",
      "Collecting edfio<0.5.0,>=0.4.2 (from moabb->EEG_Tensorflow_models==0.2)\r\n",
      "  Downloading edfio-0.4.3-py3-none-any.whl.metadata (4.0 kB)\r\n",
      "Collecting edflib-python<2.0.0,>=1.0.6 (from moabb->EEG_Tensorflow_models==0.2)\r\n",
      "  Downloading EDFlib_Python-1.0.8-py3-none-any.whl.metadata (1.3 kB)\r\n",
      "Requirement already satisfied: memory-profiler<0.62.0,>=0.61.0 in /opt/conda/lib/python3.10/site-packages (from moabb->EEG_Tensorflow_models==0.2) (0.61.0)\r\n",
      "Collecting mne-bids<0.15,>=0.14 (from moabb->EEG_Tensorflow_models==0.2)\r\n",
      "  Downloading mne_bids-0.14-py2.py3-none-any.whl.metadata (4.8 kB)\r\n",
      "Collecting pandas (from braindecode==0.7->EEG_Tensorflow_models==0.2)\r\n",
      "  Downloading pandas-1.5.3-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (11 kB)\r\n",
      "Requirement already satisfied: pooch<2.0.0,>=1.6.0 in /opt/conda/lib/python3.10/site-packages (from moabb->EEG_Tensorflow_models==0.2) (1.8.2)\r\n",
      "Collecting pyriemann<0.7,>=0.6 (from moabb->EEG_Tensorflow_models==0.2)\r\n",
      "  Downloading pyriemann-0.6-py2.py3-none-any.whl.metadata (8.3 kB)\r\n",
      "Collecting pytest<8.0.0,>=7.4.0 (from moabb->EEG_Tensorflow_models==0.2)\r\n",
      "  Downloading pytest-7.4.4-py3-none-any.whl.metadata (7.9 kB)\r\n",
      "Requirement already satisfied: requests<3.0.0,>=2.28.1 in /opt/conda/lib/python3.10/site-packages (from moabb->EEG_Tensorflow_models==0.2) (2.32.3)\r\n",
      "Collecting scikit-learn>=1.4.2 (from moabb->EEG_Tensorflow_models==0.2)\r\n",
      "  Downloading scikit_learn-1.5.1-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (12 kB)\r\n",
      "Requirement already satisfied: seaborn<0.13.0,>=0.12.1 in /opt/conda/lib/python3.10/site-packages (from moabb->EEG_Tensorflow_models==0.2) (0.12.2)\r\n",
      "Requirement already satisfied: tqdm<5.0.0,>=4.64.1 in /opt/conda/lib/python3.10/site-packages (from moabb->EEG_Tensorflow_models==0.2) (4.66.4)\r\n",
      "Requirement already satisfied: urllib3<2.0.0,>=1.26.15 in /opt/conda/lib/python3.10/site-packages (from moabb->EEG_Tensorflow_models==0.2) (1.26.18)\r\n",
      "Collecting typeguard<3.0.0,>=2.7 (from tensorflow-addons->EEG_Tensorflow_models==0.2)\r\n",
      "  Downloading typeguard-2.13.3-py3-none-any.whl.metadata (3.6 kB)\r\n",
      "Requirement already satisfied: pillow in /opt/conda/lib/python3.10/site-packages (from tf-keras-vis->EEG_Tensorflow_models==0.2) (9.5.0)\r\n",
      "Requirement already satisfied: deprecated in /opt/conda/lib/python3.10/site-packages (from tf-keras-vis->EEG_Tensorflow_models==0.2) (1.2.14)\r\n",
      "Requirement already satisfied: imageio in /opt/conda/lib/python3.10/site-packages (from tf-keras-vis->EEG_Tensorflow_models==0.2) (2.33.1)\r\n",
      "Requirement already satisfied: wheel<1.0,>=0.23.0 in /opt/conda/lib/python3.10/site-packages (from astunparse>=1.6.0->tensorflow>=2.8->EEG_Tensorflow_models==0.2) (0.42.0)\r\n",
      "Requirement already satisfied: contourpy>=1.0.1 in /opt/conda/lib/python3.10/site-packages (from matplotlib->braindecode==0.7->EEG_Tensorflow_models==0.2) (1.2.0)\r\n",
      "Requirement already satisfied: cycler>=0.10 in /opt/conda/lib/python3.10/site-packages (from matplotlib->braindecode==0.7->EEG_Tensorflow_models==0.2) (0.12.1)\r\n",
      "Requirement already satisfied: fonttools>=4.22.0 in /opt/conda/lib/python3.10/site-packages (from matplotlib->braindecode==0.7->EEG_Tensorflow_models==0.2) (4.47.0)\r\n",
      "Requirement already satisfied: kiwisolver>=1.0.1 in /opt/conda/lib/python3.10/site-packages (from matplotlib->braindecode==0.7->EEG_Tensorflow_models==0.2) (1.4.5)\r\n",
      "Requirement already satisfied: pyparsing>=2.3.1 in /opt/conda/lib/python3.10/site-packages (from matplotlib->braindecode==0.7->EEG_Tensorflow_models==0.2) (3.1.1)\r\n",
      "Requirement already satisfied: python-dateutil>=2.7 in /opt/conda/lib/python3.10/site-packages (from matplotlib->braindecode==0.7->EEG_Tensorflow_models==0.2) (2.9.0.post0)\r\n",
      "Requirement already satisfied: psutil in /opt/conda/lib/python3.10/site-packages (from memory-profiler<0.62.0,>=0.61.0->moabb->EEG_Tensorflow_models==0.2) (5.9.3)\r\n",
      "Requirement already satisfied: decorator in /opt/conda/lib/python3.10/site-packages (from mne->braindecode==0.7->EEG_Tensorflow_models==0.2) (5.1.1)\r\n",
      "Requirement already satisfied: jinja2 in /opt/conda/lib/python3.10/site-packages (from mne->braindecode==0.7->EEG_Tensorflow_models==0.2) (3.1.2)\r\n",
      "Requirement already satisfied: lazy-loader>=0.3 in /opt/conda/lib/python3.10/site-packages (from mne->braindecode==0.7->EEG_Tensorflow_models==0.2) (0.3)\r\n",
      "Requirement already satisfied: pytz>=2020.1 in /opt/conda/lib/python3.10/site-packages (from pandas->braindecode==0.7->EEG_Tensorflow_models==0.2) (2023.3.post1)\r\n",
      "Requirement already satisfied: platformdirs>=2.5.0 in /opt/conda/lib/python3.10/site-packages (from pooch<2.0.0,>=1.6.0->moabb->EEG_Tensorflow_models==0.2) (3.11.0)\r\n",
      "Requirement already satisfied: joblib in /opt/conda/lib/python3.10/site-packages (from pyriemann<0.7,>=0.6->moabb->EEG_Tensorflow_models==0.2) (1.4.2)\r\n",
      "Requirement already satisfied: iniconfig in /opt/conda/lib/python3.10/site-packages (from pytest<8.0.0,>=7.4.0->moabb->EEG_Tensorflow_models==0.2) (2.0.0)\r\n",
      "Requirement already satisfied: pluggy<2.0,>=0.12 in /opt/conda/lib/python3.10/site-packages (from pytest<8.0.0,>=7.4.0->moabb->EEG_Tensorflow_models==0.2) (1.5.0)\r\n",
      "Requirement already satisfied: exceptiongroup>=1.0.0rc8 in /opt/conda/lib/python3.10/site-packages (from pytest<8.0.0,>=7.4.0->moabb->EEG_Tensorflow_models==0.2) (1.2.0)\r\n",
      "Requirement already satisfied: tomli>=1.0.0 in /opt/conda/lib/python3.10/site-packages (from pytest<8.0.0,>=7.4.0->moabb->EEG_Tensorflow_models==0.2) (2.0.1)\r\n",
      "Requirement already satisfied: charset-normalizer<4,>=2 in /opt/conda/lib/python3.10/site-packages (from requests<3.0.0,>=2.28.1->moabb->EEG_Tensorflow_models==0.2) (3.3.2)\r\n",
      "Requirement already satisfied: idna<4,>=2.5 in /opt/conda/lib/python3.10/site-packages (from requests<3.0.0,>=2.28.1->moabb->EEG_Tensorflow_models==0.2) (3.6)\r\n",
      "Requirement already satisfied: certifi>=2017.4.17 in /opt/conda/lib/python3.10/site-packages (from requests<3.0.0,>=2.28.1->moabb->EEG_Tensorflow_models==0.2) (2024.7.4)\r\n",
      "Requirement already satisfied: threadpoolctl>=3.1.0 in /opt/conda/lib/python3.10/site-packages (from scikit-learn>=1.4.2->moabb->EEG_Tensorflow_models==0.2) (3.2.0)\r\n",
      "Requirement already satisfied: google-auth<3,>=1.6.3 in /opt/conda/lib/python3.10/site-packages (from tensorboard<2.16,>=2.15->tensorflow>=2.8->EEG_Tensorflow_models==0.2) (2.26.1)\r\n",
      "Requirement already satisfied: google-auth-oauthlib<2,>=0.5 in /opt/conda/lib/python3.10/site-packages (from tensorboard<2.16,>=2.15->tensorflow>=2.8->EEG_Tensorflow_models==0.2) (1.2.0)\r\n",
      "Requirement already satisfied: markdown>=2.6.8 in /opt/conda/lib/python3.10/site-packages (from tensorboard<2.16,>=2.15->tensorflow>=2.8->EEG_Tensorflow_models==0.2) (3.5.2)\r\n",
      "Requirement already satisfied: tensorboard-data-server<0.8.0,>=0.7.0 in /opt/conda/lib/python3.10/site-packages (from tensorboard<2.16,>=2.15->tensorflow>=2.8->EEG_Tensorflow_models==0.2) (0.7.2)\r\n",
      "Requirement already satisfied: werkzeug>=1.0.1 in /opt/conda/lib/python3.10/site-packages (from tensorboard<2.16,>=2.15->tensorflow>=2.8->EEG_Tensorflow_models==0.2) (3.0.3)\r\n",
      "Requirement already satisfied: tabulate>=0.7.7 in /opt/conda/lib/python3.10/site-packages (from skorch->braindecode==0.7->EEG_Tensorflow_models==0.2) (0.9.0)\r\n",
      "Requirement already satisfied: cachetools<6.0,>=2.0.0 in /opt/conda/lib/python3.10/site-packages (from google-auth<3,>=1.6.3->tensorboard<2.16,>=2.15->tensorflow>=2.8->EEG_Tensorflow_models==0.2) (4.2.4)\r\n",
      "Requirement already satisfied: pyasn1-modules>=0.2.1 in /opt/conda/lib/python3.10/site-packages (from google-auth<3,>=1.6.3->tensorboard<2.16,>=2.15->tensorflow>=2.8->EEG_Tensorflow_models==0.2) (0.3.0)\r\n",
      "Requirement already satisfied: rsa<5,>=3.1.4 in /opt/conda/lib/python3.10/site-packages (from google-auth<3,>=1.6.3->tensorboard<2.16,>=2.15->tensorflow>=2.8->EEG_Tensorflow_models==0.2) (4.9)\r\n",
      "Requirement already satisfied: requests-oauthlib>=0.7.0 in /opt/conda/lib/python3.10/site-packages (from google-auth-oauthlib<2,>=0.5->tensorboard<2.16,>=2.15->tensorflow>=2.8->EEG_Tensorflow_models==0.2) (1.3.1)\r\n",
      "Requirement already satisfied: MarkupSafe>=2.1.1 in /opt/conda/lib/python3.10/site-packages (from werkzeug>=1.0.1->tensorboard<2.16,>=2.15->tensorflow>=2.8->EEG_Tensorflow_models==0.2) (2.1.3)\r\n",
      "Requirement already satisfied: pyasn1<0.6.0,>=0.4.6 in /opt/conda/lib/python3.10/site-packages (from pyasn1-modules>=0.2.1->google-auth<3,>=1.6.3->tensorboard<2.16,>=2.15->tensorflow>=2.8->EEG_Tensorflow_models==0.2) (0.5.1)\r\n",
      "Requirement already satisfied: oauthlib>=3.0.0 in /opt/conda/lib/python3.10/site-packages (from requests-oauthlib>=0.7.0->google-auth-oauthlib<2,>=0.5->tensorboard<2.16,>=2.15->tensorflow>=2.8->EEG_Tensorflow_models==0.2) (3.2.2)\r\n",
      "Downloading Braindecode-0.7-py3-none-any.whl (184 kB)\r\n",
      "\u001b[2K   \u001b[90mââââââââââââââââââââââââââââââââââââââââ\u001b[0m \u001b[32m184.4/184.4 kB\u001b[0m \u001b[31m4.9 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[?25hDownloading moabb-1.1.0-py3-none-any.whl (230 kB)\r\n",
      "\u001b[2K   \u001b[90mââââââââââââââââââââââââââââââââââââââââ\u001b[0m \u001b[32m230.7/230.7 kB\u001b[0m \u001b[31m8.9 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[?25hDownloading tensorflow_addons-0.23.0-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (611 kB)\r\n",
      "\u001b[2K   \u001b[90mââââââââââââââââââââââââââââââââââââââââ\u001b[0m \u001b[32m611.8/611.8 kB\u001b[0m \u001b[31m24.0 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[?25hDownloading tf_keras_vis-0.8.7-py3-none-any.whl (52 kB)\r\n",
      "\u001b[2K   \u001b[90mââââââââââââââââââââââââââââââââââââââââ\u001b[0m \u001b[32m52.5/52.5 kB\u001b[0m \u001b[31m4.2 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[?25hDownloading coverage-7.6.1-cp310-cp310-manylinux_2_5_x86_64.manylinux1_x86_64.manylinux_2_17_x86_64.manylinux2014_x86_64.whl (234 kB)\r\n",
      "\u001b[2K   \u001b[90mââââââââââââââââââââââââââââââââââââââââ\u001b[0m \u001b[32m234.7/234.7 kB\u001b[0m \u001b[31m19.0 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[?25hDownloading edfio-0.4.3-py3-none-any.whl (25 kB)\r\n",
      "Downloading EDFlib_Python-1.0.8-py3-none-any.whl (26 kB)\r\n",
      "Downloading keras-2.15.0-py3-none-any.whl (1.7 MB)\r\n",
      "\u001b[2K   \u001b[90mââââââââââââââââââââââââââââââââââââââââ\u001b[0m \u001b[32m1.7/1.7 MB\u001b[0m \u001b[31m53.9 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[?25hDownloading mne_bids-0.14-py2.py3-none-any.whl (1.2 MB)\r\n",
      "\u001b[2K   \u001b[90mââââââââââââââââââââââââââââââââââââââââ\u001b[0m \u001b[32m1.2/1.2 MB\u001b[0m \u001b[31m53.6 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[?25hDownloading pandas-1.5.3-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (12.1 MB)\r\n",
      "\u001b[2K   \u001b[90mââââââââââââââââââââââââââââââââââââââââ\u001b[0m \u001b[32m12.1/12.1 MB\u001b[0m \u001b[31m85.5 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[?25hDownloading pyriemann-0.6-py2.py3-none-any.whl (111 kB)\r\n",
      "\u001b[2K   \u001b[90mââââââââââââââââââââââââââââââââââââââââ\u001b[0m \u001b[32m111.7/111.7 kB\u001b[0m \u001b[31m5.1 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[?25hDownloading pytest-7.4.4-py3-none-any.whl (325 kB)\r\n",
      "\u001b[2K   \u001b[90mââââââââââââââââââââââââââââââââââââââââ\u001b[0m \u001b[32m325.3/325.3 kB\u001b[0m \u001b[31m21.7 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[?25hDownloading scikit_learn-1.5.1-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (13.4 MB)\r\n",
      "\u001b[2K   \u001b[90mââââââââââââââââââââââââââââââââââââââââ\u001b[0m \u001b[32m13.4/13.4 MB\u001b[0m \u001b[31m80.0 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[?25hDownloading typeguard-2.13.3-py3-none-any.whl (17 kB)\r\n",
      "Downloading skorch-1.0.0-py3-none-any.whl (239 kB)\r\n",
      "\u001b[2K   \u001b[90mââââââââââââââââââââââââââââââââââââââââ\u001b[0m \u001b[32m239.4/239.4 kB\u001b[0m \u001b[31m16.4 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[?25hBuilding wheels for collected packages: EEG_Tensorflow_models\r\n",
      "  Building wheel for EEG_Tensorflow_models (setup.py) ... \u001b[?25l-\b \bdone\r\n",
      "\u001b[?25h  Created wheel for EEG_Tensorflow_models: filename=EEG_Tensorflow_models-0.2-py3-none-any.whl size=29376 sha256=4deb4c9f950d98141703fc0106b024e5f0500a288bd4dad2c2c51905f0fd78e9\r\n",
      "  Stored in directory: /tmp/pip-ephem-wheel-cache-wj6bhe4u/wheels/05/dc/8a/9d552a33fb901c0d7ab2a72746b5ea17643c570811c711d568\r\n",
      "Successfully built EEG_Tensorflow_models\r\n",
      "Installing collected packages: typeguard, keras, edflib-python, edfio, coverage, tf-keras-vis, tensorflow-addons, scikit-learn, pytest, pandas, skorch, pyriemann, mne-bids, braindecode, moabb, EEG_Tensorflow_models\r\n",
      "  Attempting uninstall: typeguard\r\n",
      "    Found existing installation: typeguard 4.1.5\r\n",
      "    Uninstalling typeguard-4.1.5:\r\n",
      "      Successfully uninstalled typeguard-4.1.5\r\n",
      "  Attempting uninstall: keras\r\n",
      "    Found existing installation: keras 3.4.1\r\n",
      "    Uninstalling keras-3.4.1:\r\n",
      "      Successfully uninstalled keras-3.4.1\r\n",
      "  Attempting uninstall: scikit-learn\r\n",
      "    Found existing installation: scikit-learn 1.2.2\r\n",
      "    Uninstalling scikit-learn-1.2.2:\r\n",
      "      Successfully uninstalled scikit-learn-1.2.2\r\n",
      "  Attempting uninstall: pytest\r\n",
      "    Found existing installation: pytest 8.2.2\r\n",
      "    Uninstalling pytest-8.2.2:\r\n",
      "      Successfully uninstalled pytest-8.2.2\r\n",
      "  Attempting uninstall: pandas\r\n",
      "    Found existing installation: pandas 2.2.2\r\n",
      "    Uninstalling pandas-2.2.2:\r\n",
      "      Successfully uninstalled pandas-2.2.2\r\n",
      "\u001b[31mERROR: pip's dependency resolver does not currently take into account all the packages that are installed. This behaviour is the source of the following dependency conflicts.\r\n",
      "cudf 24.6.1 requires cubinlinker, which is not installed.\r\n",
      "cudf 24.6.1 requires cupy-cuda11x>=12.0.0, which is not installed.\r\n",
      "cudf 24.6.1 requires ptxcompiler, which is not installed.\r\n",
      "cuml 24.6.1 requires cupy-cuda11x>=12.0.0, which is not installed.\r\n",
      "dask-cudf 24.6.1 requires cupy-cuda11x>=12.0.0, which is not installed.\r\n",
      "tensorflow-decision-forests 1.8.1 requires wurlitzer, which is not installed.\r\n",
      "beatrix-jupyterlab 2023.128.151533 requires jupyterlab~=3.6.0, but you have jupyterlab 4.2.3 which is incompatible.\r\n",
      "cudf 24.6.1 requires cuda-python<12.0a0,>=11.7.1, but you have cuda-python 12.5.0 which is incompatible.\r\n",
      "cudf 24.6.1 requires pandas<2.2.3dev0,>=2.0, but you have pandas 1.5.3 which is incompatible.\r\n",
      "dask-cudf 24.6.1 requires pandas<2.2.3dev0,>=2.0, but you have pandas 1.5.3 which is incompatible.\r\n",
      "dask-expr 1.1.7 requires pandas>=2, but you have pandas 1.5.3 which is incompatible.\r\n",
      "featuretools 1.31.0 requires pandas>=2.0.0, but you have pandas 1.5.3 which is incompatible.\r\n",
      "libpysal 4.9.2 requires packaging>=22, but you have packaging 21.3 which is incompatible.\r\n",
      "libpysal 4.9.2 requires shapely>=2.0.1, but you have shapely 1.8.5.post1 which is incompatible.\r\n",
      "mizani 0.11.4 requires pandas>=2.1.0, but you have pandas 1.5.3 which is incompatible.\r\n",
      "momepy 0.7.2 requires shapely>=2, but you have shapely 1.8.5.post1 which is incompatible.\r\n",
      "osmnx 1.9.3 requires shapely>=2.0, but you have shapely 1.8.5.post1 which is incompatible.\r\n",
      "plotnine 0.13.6 requires pandas<3.0.0,>=2.1.0, but you have pandas 1.5.3 which is incompatible.\r\n",
      "pointpats 2.5.0 requires shapely>=2, but you have shapely 1.8.5.post1 which is incompatible.\r\n",
      "pyldavis 3.4.1 requires pandas>=2.0.0, but you have pandas 1.5.3 which is incompatible.\r\n",
      "rapids-dask-dependency 24.6.0a0 requires dask==2024.5.1, but you have dask 2024.7.0 which is incompatible.\r\n",
      "spaghetti 1.7.6 requires shapely>=2.0.1, but you have shapely 1.8.5.post1 which is incompatible.\r\n",
      "spopt 0.6.1 requires shapely>=2.0.1, but you have shapely 1.8.5.post1 which is incompatible.\r\n",
      "woodwork 0.31.0 requires pandas>=2.0.0, but you have pandas 1.5.3 which is incompatible.\r\n",
      "xarray 2024.6.0 requires packaging>=23.1, but you have packaging 21.3 which is incompatible.\r\n",
      "xarray 2024.6.0 requires pandas>=2.0, but you have pandas 1.5.3 which is incompatible.\r\n",
      "ydata-profiling 4.6.4 requires numpy<1.26,>=1.16.0, but you have numpy 1.26.4 which is incompatible.\r\n",
      "ydata-profiling 4.6.4 requires typeguard<5,>=4.1.2, but you have typeguard 2.13.3 which is incompatible.\u001b[0m\u001b[31m\r\n",
      "\u001b[0mSuccessfully installed EEG_Tensorflow_models-0.2 braindecode-0.7 coverage-7.6.1 edfio-0.4.3 edflib-python-1.0.8 keras-2.15.0 mne-bids-0.14 moabb-1.1.0 pandas-1.5.3 pyriemann-0.6 pytest-7.4.4 scikit-learn-1.5.1 skorch-1.0.0 tensorflow-addons-0.23.0 tf-keras-vis-0.8.7 typeguard-2.13.3\r\n"
     ]
    }
   ],
   "source": [
    "!pip install -U git+https://github.com/UN-GCPDS/python-gcpds.databases #Package for database reading.\n",
    "!pip install -U git+https://github.com/UN-GCPDS/python-gcpds.EEG_Tensorflow_models"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "788e8eaa",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-14T15:24:16.128850Z",
     "iopub.status.busy": "2024-08-14T15:24:16.128524Z",
     "iopub.status.idle": "2024-08-14T15:24:30.924902Z",
     "shell.execute_reply": "2024-08-14T15:24:30.924048Z"
    },
    "papermill": {
     "duration": 14.818364,
     "end_time": "2024-08-14T15:24:30.927350",
     "exception": false,
     "start_time": "2024-08-14T15:24:16.108986",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2024-08-14 15:24:21.512931: E external/local_xla/xla/stream_executor/cuda/cuda_dnn.cc:9261] Unable to register cuDNN factory: Attempting to register factory for plugin cuDNN when one has already been registered\n",
      "2024-08-14 15:24:21.513032: E external/local_xla/xla/stream_executor/cuda/cuda_fft.cc:607] Unable to register cuFFT factory: Attempting to register factory for plugin cuFFT when one has already been registered\n",
      "2024-08-14 15:24:21.642037: E external/local_xla/xla/stream_executor/cuda/cuda_blas.cc:1515] Unable to register cuBLAS factory: Attempting to register factory for plugin cuBLAS when one has already been registered\n"
     ]
    }
   ],
   "source": [
    "from gcpds.databases import GIGA_MI_ME\n",
    "from typing import Optional, Sequence, Tuple\n",
    "import matplotlib.pyplot as plt\n",
    "import mne\n",
    "from sklearn.base import BaseEstimator, TransformerMixin\n",
    "from scipy.signal import freqz, filtfilt, resample\n",
    "from scipy.signal import butter as bw\n",
    "import tensorflow as tf\n",
    "from tensorflow.keras.models import Model, Sequential\n",
    "from tensorflow.keras.layers import  Input, Flatten, Dense, Activation, Dropout, concatenate, Layer, Conv2D, AveragePooling2D, SeparableConv2D, DepthwiseConv2D, BatchNormalization, SpatialDropout2D, Lambda\n",
    "from tensorflow.keras.callbacks import EarlyStopping\n",
    "from tensorflow.keras.constraints import max_norm\n",
    "from tensorflow.keras.losses import Loss\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.preprocessing import OneHotEncoder, MinMaxScaler\n",
    "from sklearn.decomposition import PCA\n",
    "from sklearn.manifold import TSNE\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "from sklearn.model_selection import KFold\n",
    "from keras_tuner import HyperModel, RandomSearch, Objective\n",
    "from IPython.display import FileLink"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ea7314ab",
   "metadata": {
    "papermill": {
     "duration": 0.017102,
     "end_time": "2024-08-14T15:24:30.963497",
     "exception": false,
     "start_time": "2024-08-14T15:24:30.946395",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# **FunciÃ³n que carga la base de datos GIGA**\n",
    "\n",
    "Recuerde que es importante importar esta base de datos que se encuentra como \"giga-science-dataset\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "7a864d3b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-14T15:24:31.000322Z",
     "iopub.status.busy": "2024-08-14T15:24:30.999726Z",
     "iopub.status.idle": "2024-08-14T15:24:31.033966Z",
     "shell.execute_reply": "2024-08-14T15:24:31.033292Z"
    },
    "papermill": {
     "duration": 0.055156,
     "end_time": "2024-08-14T15:24:31.035848",
     "exception": false,
     "start_time": "2024-08-14T15:24:30.980692",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def load_GIGA(db: GIGA_MI_ME,\n",
    "              sbj: int,\n",
    "              eeg_ch_names: Sequence[str],\n",
    "              fs: float, \n",
    "              f_bank: np.ndarray, \n",
    "              vwt: np.ndarray, \n",
    "              new_fs: float) -> Tuple[np.ndarray, np.ndarray]:\n",
    "    \"\"\"\n",
    "    This function loads the GIGA-Science dataset locally.\n",
    "    \n",
    "    Parameters\n",
    "    ----------\n",
    "    db: GIGA_MI_ME\n",
    "        A GIGA_MI_ME object created by the gcpds.databases.GIGA_MI_ME module\n",
    "    sbj: int\n",
    "        The subject to load\n",
    "    eeg_ch_names: Sequence[str]\n",
    "        The EEG channel names in order\n",
    "    fs: float\n",
    "        The sampling frecuency\n",
    "    f_bank: np.ndarray\n",
    "        The frecuency range(s) to use\n",
    "    vwt: np.ndarray\n",
    "        The time window to load\n",
    "    new_fs: float\n",
    "        The new sampling frecuency to resample the data to\n",
    "    \n",
    "    Returns\n",
    "    ----------\n",
    "    Tuple[np.ndarray, np.ndarray]\n",
    "        A tuple containing the EEG signals for each trial and the corresponding label\n",
    "    \n",
    "    Notes\n",
    "    ----------\n",
    "    The database description can be found here:\n",
    "    https://academic.oup.com/gigascience/article/6/7/gix034/3796323\n",
    "    \"\"\"\n",
    "    index_eeg_chs = db.format_channels_selectors(channels = eeg_ch_names) - 1\n",
    "\n",
    "    tf_repr = TimeFrequencyRpr(sfreq = fs, f_bank = f_bank, vwt = vwt)\n",
    "\n",
    "    db.load_subject(sbj)\n",
    "    X, y = db.get_data(classes = ['left hand mi', 'right hand mi']) #Load MI classes, all channels {EEG}, reject bad trials, uV\n",
    "    X = X[:, index_eeg_chs, :] #spatial rearrangement\n",
    "    X = np.squeeze(tf_repr.transform(X))\n",
    "    #Resampling\n",
    "    if new_fs == fs:\n",
    "        print('No resampling, since new sampling rate same.')\n",
    "    else:\n",
    "        print(\"Resampling from {:f} to {:f} Hz.\".format(fs, new_fs))\n",
    "        X = resample(X, int((X.shape[-1]/fs)*new_fs), axis = -1)\n",
    "\n",
    "    #print(np.mean (X), np.var(X))\n",
    "    return X, y\n",
    "\n",
    "def butterworth_digital_filter(X, N, Wn, btype, fs, axis=-1, padtype=None, padlen=0, method='pad', irlen=None):\n",
    "    \"\"\"\n",
    "    Apply digital butterworth filter\n",
    "    INPUT\n",
    "    ------\n",
    "    1. X: (D array)\n",
    "    array with signals.\n",
    "    2. N: (int+)\n",
    "    The order of the filter.\n",
    "    3. Wn: (float+ or 1D array)\n",
    "    The critical frequency or frequencies. For lowpass and highpass filters, Wn is a scalar; for bandpass and bandstop filters, Wn is a length-2 vector.\n",
    "    For a Butterworth filter, this is the point at which the gain drops to 1/sqrt(2) that of the passband (the â-3 dB pointâ).\n",
    "    If fs is not specified, Wn units are normalized from 0 to 1, where 1 is the Nyquist frequency (Wn is thus in half cycles / sample and defined as 2*critical frequencies / fs). If fs is specified, Wn is in the same units as fs.\n",
    "    4. btype: (str) {âlowpassâ, âhighpassâ, âbandpassâ, âbandstopâ}\n",
    "    The type of filter\n",
    "    5. fs: (float+)\n",
    "    The sampling frequency of the digital system.\n",
    "    6. axis: (int), Default=1.\n",
    "    The axis of x to which the filter is applied.\n",
    "    7. padtype: (str) or None, {'odd', 'even', 'constant'}\n",
    "    This determines the type of extension to use for the padded signal to which the filter is applied. If padtype is None, no padding is used. The default is âoddâ.\n",
    "    8. padlen: (int+) or None, Default=0\n",
    "    The number of elements by which to extend x at both ends of axis before applying the filter. This value must be less than x.shape[axis] - 1. padlen=0 implies no padding.\n",
    "    9. method: (str), {'pad', 'gust'}\n",
    "    Determines the method for handling the edges of the signal, either âpadâ or âgustâ. When method is âpadâ, the signal is padded; the type of padding is determined by padtype\n",
    "    and padlen, and irlen is ignored. When method is âgustâ, Gustafssonâs method is used, and padtype and padlen are ignored.\n",
    "    10. irlen: (int) or None, Default=nONE\n",
    "    When method is âgustâ, irlen specifies the length of the impulse response of the filter. If irlen is None, no part of the impulse response is ignored.\n",
    "    For a long signal, specifying irlen can significantly improve the performance of the filter.\n",
    "    OUTPUT\n",
    "    ------\n",
    "    X_fil: (D array)\n",
    "    array with filtered signals.\n",
    "    \"\"\"\n",
    "    b, a = bw(N, Wn, btype, analog=False, output='ba', fs=fs)\n",
    "    return filtfilt(b, a, X, axis=axis, padtype=padtype, padlen=padlen, method=method, irlen=irlen)\n",
    "class TimeFrequencyRpr(BaseEstimator, TransformerMixin):\n",
    "    \"\"\"\n",
    "    Time frequency representation of EEG signals.\n",
    "\n",
    "    Parameters\n",
    "    ----------\n",
    "    1. sfreq:  (float) Sampling frequency in Hz.\n",
    "    2. f_bank: (2D array) Filter banks Frequencies. Default=None\n",
    "    3. vwt:    (2D array) Interest time windows. Default=None\n",
    "    Methods\n",
    "    -------\n",
    "    1. fit(X, y=None)\n",
    "    2. transform(X, y=None)\n",
    "    \"\"\"\n",
    "    def __init__(self, sfreq, f_bank=None, vwt=None):\n",
    "        self.sfreq = sfreq\n",
    "        self.f_bank = f_bank\n",
    "        self.vwt = vwt\n",
    "    # ------------------------------------------------------------------------------\n",
    "\n",
    "    def _validation_param(self):\n",
    "        \"\"\"\n",
    "        Validate Time-Frequency characterization parameters.\n",
    "        INPUT\n",
    "        -----\n",
    "          1. self\n",
    "        ------\n",
    "          2. None\n",
    "        \"\"\"\n",
    "        if self.sfreq <= 0:\n",
    "            raise ValueError('Non negative sampling frequency is accepted')\n",
    "\n",
    "\n",
    "        if self.f_bank is None:\n",
    "            self.flag_f_bank = False\n",
    "        elif self.f_bank.ndim != 2:\n",
    "            raise ValueError('Band frequencies have to be a 2D array')\n",
    "        else:\n",
    "            self.flag_f_bank = True\n",
    "\n",
    "        if self.vwt is None:\n",
    "            self.flag_vwt = False\n",
    "        elif self.vwt.ndim != 2:\n",
    "            raise ValueError('Time windows have to be a 2D array')\n",
    "        else:\n",
    "            self.flag_vwt = True\n",
    "\n",
    "    # ------------------------------------------------------------------------------\n",
    "    def _filter_bank(self, X):\n",
    "        \"\"\"\n",
    "        Filter bank Characterization.\n",
    "        INPUT\n",
    "        -----\n",
    "          1. X: (3D array) set of EEG signals, shape (trials, channels, time_samples)\n",
    "        OUTPUT\n",
    "        ------\n",
    "          1. X_f: (4D array) set of filtered EEG signals, shape (trials, channels, time_samples, frequency_bands)\n",
    "        \"\"\"\n",
    "        X_f = np.zeros((X.shape[0], X.shape[1], X.shape[2], self.f_bank.shape[0])) #epochs, Ch, Time, bands\n",
    "        for f in np.arange(self.f_bank.shape[0]):\n",
    "            X_f[:,:,:,f] = butterworth_digital_filter(X, N=5, Wn=self.f_bank[f], btype='bandpass', fs=self.sfreq)\n",
    "        return X_f\n",
    "\n",
    "    # ------------------------------------------------------------------------------\n",
    "    def _sliding_windows(self, X):\n",
    "        \"\"\"\n",
    "        Sliding Windows Characterization.\n",
    "        INPUT\n",
    "        -----\n",
    "          1. X: (3D array) set of EEG signals, shape (trials, channels, time_samples)\n",
    "        OUTPUT\n",
    "        ------\n",
    "          1. X_w: (4D array) shape (trials, channels, window_time_samples, number_of_windows)\n",
    "        \"\"\"\n",
    "        window_lenght = int(self.sfreq*self.vwt[0,1] - self.sfreq*self.vwt[0,0])\n",
    "        X_w = np.zeros((X.shape[0], X.shape[1], window_lenght, self.vwt.shape[0]))\n",
    "        for w in np.arange(self.vwt.shape[0]):\n",
    "            X_w[:,:,:,w] = X[:,:,int(self.sfreq*self.vwt[w,0]):int(self.sfreq*self.vwt[w,1])]\n",
    "        return X_w\n",
    "\n",
    "    # ------------------------------------------------------------------------------\n",
    "    def fit(self, X, y=None):\n",
    "        \"\"\"\n",
    "        fit.\n",
    "        INPUT\n",
    "        -----\n",
    "          1. X: (3D array) set of EEG signals, shape (trials, channels, time_samples)\n",
    "          2. y: (1D array) target labels. Default=None\n",
    "        OUTPUT\n",
    "        ------\n",
    "          1. None\n",
    "        \"\"\"\n",
    "        pass\n",
    "\n",
    "    # ------------------------------------------------------------------------------\n",
    "    def transform(self, X, y=None):\n",
    "        \"\"\"\n",
    "        Time frequency representation of EEG signals.\n",
    "        INPUT\n",
    "        -----\n",
    "          1. X: (3D array) set of EEG signals, shape (trials, channels, times)\n",
    "        OUTPUT\n",
    "        ------\n",
    "          1. X_wf: (5D array) Time-frequency representation of EEG signals, shape (trials, channels, window_time_samples, number_of_windows, frequency_bands)\n",
    "        \"\"\"\n",
    "        self._validation_param()     #Validate sfreq, f_freq, vwt\n",
    "\n",
    "        #Avoid edge effects of digital filter, 1st:fbk, 2th:vwt\n",
    "        if self.flag_f_bank:\n",
    "            X_f = self._filter_bank(X)\n",
    "        else:\n",
    "            X_f = X[:,:,:,np.newaxis]\n",
    "\n",
    "        if self.flag_vwt:\n",
    "            X_wf = []\n",
    "            for f in range(X_f.shape[3]):\n",
    "                X_wf.append(self._sliding_windows(X_f[:,:,:,f]))\n",
    "            X_wf = np.stack(X_wf, axis=-1)\n",
    "        else:\n",
    "            X_wf = X_f[:,:,:,np.newaxis,:]\n",
    "        return X_wf\n",
    "    \n",
    "def plot_training_history(history):\n",
    "    # Extraer datos de history\n",
    "    train_loss = history.history['loss']\n",
    "    val_loss = history.history['val_loss']\n",
    "    train_out_activation_loss = history.history['out_activation_loss']\n",
    "    val_out_activation_loss = history.history['val_out_activation_loss']\n",
    "    train_concatenate_2_loss = history.history['concatenated_entropies_loss']\n",
    "    val_concatenate_2_loss = history.history['val_concatenated_entropies_loss']\n",
    "    train_out_activation_acc = history.history['out_activation_binary_accuracy']\n",
    "    val_out_activation_acc = history.history['val_out_activation_binary_accuracy']\n",
    "    epochs = range(1, len(train_loss) + 1)  # NÃºmero de Ã©pocas\n",
    "\n",
    "    # Graficar pÃ©rdida\n",
    "    plt.figure(figsize=(8, 4))\n",
    "    plt.plot(epochs, train_loss, 'b', label='Training total loss')\n",
    "    plt.plot(epochs, val_loss, 'r', label='Validation total loss')\n",
    "    plt.plot(epochs, train_out_activation_loss, 'g', label='Training out_activation_loss')\n",
    "    plt.plot(epochs, val_out_activation_loss, 'm', label='Validation out_activation_loss')\n",
    "    plt.plot(epochs, train_concatenate_2_loss, 'y', label='Training concatenated_entropies_loss')\n",
    "    plt.plot(epochs, val_concatenate_2_loss, 'c', label='Validation concatenated_entropies_loss')\n",
    "    plt.title('Training and Validation Loss')\n",
    "    plt.xlabel('Epochs')\n",
    "    plt.ylabel('Loss')\n",
    "    plt.legend()\n",
    "    plt.grid()\n",
    "    plt.show()\n",
    "\n",
    "    # Graficar precisiÃ³n\n",
    "    plt.figure(figsize=(8, 4))\n",
    "    plt.plot(epochs, train_out_activation_acc, 'b', label='Training out_activation_binary_accuracy')\n",
    "    plt.plot(epochs, val_out_activation_acc, 'r', label='Validation out_activation_binary_accuracy')\n",
    "    plt.title('Training and Validation Accuracy')\n",
    "    plt.xlabel('Epochs')\n",
    "    plt.ylabel('Accuracy')\n",
    "    plt.legend()\n",
    "    plt.grid()\n",
    "    plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b19275df",
   "metadata": {
    "papermill": {
     "duration": 0.017221,
     "end_time": "2024-08-14T15:24:31.070873",
     "exception": false,
     "start_time": "2024-08-14T15:24:31.053652",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## **De esta forma cargamos la base de datos**\n",
    "\n",
    "Se definen los nombres de los canales para poder crear un diccionario con los parÃ¡metros que necesitamos a la hora de importar los datos de un solo sujeto."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "c323fe85",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-14T15:24:31.106460Z",
     "iopub.status.busy": "2024-08-14T15:24:31.106181Z",
     "iopub.status.idle": "2024-08-14T15:24:31.113467Z",
     "shell.execute_reply": "2024-08-14T15:24:31.112642Z"
    },
    "papermill": {
     "duration": 0.026954,
     "end_time": "2024-08-14T15:24:31.115324",
     "exception": false,
     "start_time": "2024-08-14T15:24:31.088370",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "db = GIGA_MI_ME('/kaggle/input/giga-science-gcpds/GIGA_MI_ME')\n",
    "fs = db.metadata['sampling_rate']\n",
    "# 64 canales\n",
    "eeg_ch_names = ['Fp1','Fpz','Fp2',\n",
    "              'AF7','AF3','AFz','AF4','AF8',\n",
    "              'F7','F5','F3','F1','Fz','F2','F4','F6','F8',\n",
    "              'FT7','FC5','FC3','FC1','FCz','FC2','FC4','FC6','FT8',\n",
    "              'T7','C5','C3','C1','Cz','C2','C4','C6','T8',\n",
    "              'TP7','CP5','CP3','CP1','CPz','CP2','CP4','CP6','TP8',\n",
    "              'P9','P7','P5','P3','P1','Pz','P2','P4','P6','P8','P10',\n",
    "              'PO7','PO3','POz','PO4','PO8',\n",
    "              'O1','Oz','O2',\n",
    "              'Iz']\n",
    "load_args = dict(db = db,\n",
    "                 eeg_ch_names = eeg_ch_names,\n",
    "                 fs = fs,\n",
    "                 f_bank = np.asarray([[4., 40.]]), # bandpass\n",
    "                 vwt = np.asarray([[2.5, 5]]),\n",
    "                 new_fs = 128.)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7d8a1d2f",
   "metadata": {
    "papermill": {
     "duration": 0.016737,
     "end_time": "2024-08-14T15:24:31.149125",
     "exception": false,
     "start_time": "2024-08-14T15:24:31.132388",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## **Ejemplo de cargar los datos de un sujeto**\n",
    "\n",
    "Para este caso, usaremos el sujeto 43."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "9ee881bc",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-14T15:24:31.184044Z",
     "iopub.status.busy": "2024-08-14T15:24:31.183779Z",
     "iopub.status.idle": "2024-08-14T15:24:37.258983Z",
     "shell.execute_reply": "2024-08-14T15:24:37.258003Z"
    },
    "papermill": {
     "duration": 6.09507,
     "end_time": "2024-08-14T15:24:37.261043",
     "exception": false,
     "start_time": "2024-08-14T15:24:31.165973",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Resampling from 512.000000 to 128.000000 Hz.\n"
     ]
    }
   ],
   "source": [
    "sbj = 43\n",
    "X, y = load_GIGA(sbj=sbj, **load_args) # load_args se descomprime para poner todos los valores de los parÃ¡metros"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "29b3b5d1",
   "metadata": {
    "papermill": {
     "duration": 0.017641,
     "end_time": "2024-08-14T15:24:37.296340",
     "exception": false,
     "start_time": "2024-08-14T15:24:37.278699",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# **Gaussian Kernel Leyer**\n",
    "\n",
    "Esta es una capa custom de keras para poder aplicar el kernel gaussiano en la red.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "d551ba53",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-14T15:24:37.334012Z",
     "iopub.status.busy": "2024-08-14T15:24:37.333424Z",
     "iopub.status.idle": "2024-08-14T15:24:37.346208Z",
     "shell.execute_reply": "2024-08-14T15:24:37.345291Z"
    },
    "papermill": {
     "duration": 0.034039,
     "end_time": "2024-08-14T15:24:37.348313",
     "exception": false,
     "start_time": "2024-08-14T15:24:37.314274",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "class GaussianKernelLayer(Layer):\n",
    "    \"\"\"\n",
    "    Capa personalizada de Keras que aplica un kernel Gaussiano sobre las entradas.\n",
    "\n",
    "    Esta capa calcula la distancia euclidiana al cuadrado entre pares de puntos y luego aplica una funciÃ³n kernel Gaussiana \n",
    "    para transformar esas distancias en similitudes, lo que es Ãºtil en el procesamiento de seÃ±ales como EEG o en la construcciÃ³n \n",
    "    de redes neuronales con funciones de kernel.\n",
    "\n",
    "    ParÃ¡metros:\n",
    "    -----------\n",
    "    sigma : float, opcional (por defecto=1.0)\n",
    "        DesviaciÃ³n estÃ¡ndar de la funciÃ³n kernel Gaussiana. Controla el alcance o \"spread\" de la Gaussiana.\n",
    "\n",
    "    MÃ©todos:\n",
    "    --------\n",
    "    build(input_shape):\n",
    "        MÃ©todo de construcciÃ³n que inicializa los componentes internos de la capa basados en la forma de la entrada.\n",
    "    \n",
    "    call(inputs):\n",
    "        MÃ©todo que aplica la transformaciÃ³n de la capa a las entradas.\n",
    "        \n",
    "        ParÃ¡metros:\n",
    "        -----------\n",
    "        inputs : Tensor\n",
    "            Tensor de entrada con la forma `(N, C, T, F)` donde:\n",
    "            - N: NÃºmero de muestras en el lote.\n",
    "            - C: NÃºmero de canales o caracterÃ­sticas.\n",
    "            - T: NÃºmero de pasos temporales.\n",
    "            - F: NÃºmero de filtros.\n",
    "\n",
    "        Retorna:\n",
    "        --------\n",
    "        gaussian_kernel : Tensor\n",
    "            Tensor con la misma forma que el tensor de entrada, pero donde cada entrada ha sido transformada por el kernel Gaussiano.\n",
    "    \"\"\"\n",
    "\n",
    "    def __init__(self, sigma=1.0, **kwargs):\n",
    "        super(GaussianKernelLayer, self).__init__(**kwargs)\n",
    "        self.sigma = sigma\n",
    "\n",
    "    def build(self, input_shape):\n",
    "        \"\"\"\n",
    "        Inicializa la capa. Este mÃ©todo es llamado una sola vez y se utiliza para construir las variables de la capa.\n",
    "\n",
    "        ParÃ¡metros:\n",
    "        -----------\n",
    "        input_shape : tuple\n",
    "            Forma de la entrada esperada por la capa.\n",
    "        \"\"\"\n",
    "        super(GaussianKernelLayer, self).build(input_shape)\n",
    "\n",
    "    def call(self, inputs):\n",
    "        \"\"\"\n",
    "        Aplica la transformaciÃ³n del kernel Gaussiano a los datos de entrada.\n",
    "\n",
    "        ParÃ¡metros:\n",
    "        -----------\n",
    "        inputs : Tensor\n",
    "            Tensor de entrada de forma `(N, C, T, F)`.\n",
    "\n",
    "        Retorna:\n",
    "        --------\n",
    "        gaussian_kernel : Tensor\n",
    "            Tensor de salida donde se ha aplicado el kernel Gaussiano, con forma `(N, C, C, F)`.\n",
    "        \"\"\"\n",
    "        # DescomposiciÃ³n de la forma del tensor de entrada\n",
    "        N, C, T, F = tf.shape(inputs)[0], tf.shape(inputs)[1], tf.shape(inputs)[2], tf.shape(inputs)[3]\n",
    "        \n",
    "        # Reorganizar el tensor de entrada a la forma (N*F, C, T)\n",
    "        inputs = tf.transpose(inputs, perm=(0, 3, 1, 2))  # Cambia la forma a (N, F, C, T)\n",
    "        inputs_reshaped = tf.reshape(inputs, (N * F, C, T))\n",
    "        \n",
    "        # Calcular la distancia euclidiana al cuadrado entre pares de puntos\n",
    "        squared_differences = tf.expand_dims(inputs_reshaped, axis=2) - tf.expand_dims(inputs_reshaped, axis=1)  # (N*F, C, C, T)\n",
    "        squared_differences = tf.square(squared_differences)  # (N*F, C, C, T)\n",
    "        pairwise_distances_squared = tf.reduce_sum(squared_differences, axis=-1)  # (N*F, C, C)\n",
    "        pairwise_distances_squared = tf.reshape(pairwise_distances_squared, (N, F, C, C))  # (N, F, C, C)\n",
    "        pairwise_distances_squared = tf.transpose(pairwise_distances_squared, perm=(0, 2, 3, 1))  # (N, C, C, F)\n",
    "        \n",
    "        # Calcular el kernel Gaussiano\n",
    "        gaussian_kernel = tf.exp(-pairwise_distances_squared / (2.0 * tf.square(self.sigma)))\n",
    "        \n",
    "        return gaussian_kernel\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6a6bbe85",
   "metadata": {
    "papermill": {
     "duration": 0.017409,
     "end_time": "2024-08-14T15:24:37.383988",
     "exception": false,
     "start_time": "2024-08-14T15:24:37.366579",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# **Inception Block**\n",
    "\n",
    "Es el bloque donde se aplican 3 kernels gaussianos y cada uno seguido de una capa convolucional con un nÃºmero especÃ­fico de filtros."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "909c0cdc",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-14T15:24:37.420928Z",
     "iopub.status.busy": "2024-08-14T15:24:37.420641Z",
     "iopub.status.idle": "2024-08-14T15:24:37.430483Z",
     "shell.execute_reply": "2024-08-14T15:24:37.429618Z"
    },
    "papermill": {
     "duration": 0.030889,
     "end_time": "2024-08-14T15:24:37.432577",
     "exception": false,
     "start_time": "2024-08-14T15:24:37.401688",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def inception_block(x, filters, sigmas):\n",
    "    \"\"\"\n",
    "    Construye un bloque de Inception personalizado que incluye capas de convoluciÃ³n y capas de kernel Gaussiano.\n",
    "\n",
    "    Este bloque Inception crea tres ramas, cada una aplicando un kernel Gaussiano seguido de una capa de convoluciÃ³n 2D. \n",
    "    Finalmente, las salidas de estas ramas se concatenan a lo largo del eje de los canales.\n",
    "\n",
    "    ParÃ¡metros:\n",
    "    -----------\n",
    "    x : Tensor\n",
    "        Tensor de entrada con forma `(N, C, T, F)` donde:\n",
    "        - N: NÃºmero de muestras en el lote.\n",
    "        - C: NÃºmero de canales o caracterÃ­sticas.\n",
    "        - T: NÃºmero de pasos temporales.\n",
    "        - F: NÃºmero de filtros o caracterÃ­sticas adicionales.\n",
    "\n",
    "    filters : list of int\n",
    "        Lista que contiene el nÃºmero de filtros para cada rama del bloque Inception. Debe ser una lista de tres enteros `[f1, f2, f3]` \n",
    "        donde `f1`, `f2`, y `f3` son el nÃºmero de filtros para las ramas 1, 2 y 3 respectivamente.\n",
    "\n",
    "    sigmas : list of float\n",
    "        Lista que contiene los valores de `sigma` para cada capa `GaussianKernelLayer` en las ramas del bloque Inception. Debe ser una lista \n",
    "        de tres valores `[sigma1, sigma2, sigma3]` donde `sigma1`, `sigma2`, y `sigma3` corresponden a las ramas 1, 2 y 3 respectivamente.\n",
    "\n",
    "    Retorna:\n",
    "    --------\n",
    "    branch_k1, branch_k2, branch_k3 : Tensors\n",
    "        Las salidas de las capas `GaussianKernelLayer` en las tres ramas, con forma `(N, C, C, F)`.\n",
    "\n",
    "    output : Tensor\n",
    "        La salida concatenada de las tres ramas despuÃ©s de la capa de convoluciÃ³n, con forma `(N, C, T, f1 + f2 + f3)`.\n",
    "\n",
    "    DescripciÃ³n:\n",
    "    ------------\n",
    "    Este bloque Inception se compone de las siguientes partes:\n",
    "    1. **Rama 1**:\n",
    "        - Aplica una capa `GaussianKernelLayer` con `sigma=sigmas[0]` sobre la entrada `x`.\n",
    "        - Aplica una capa de convoluciÃ³n 2D con `f1` filtros de tamaÃ±o `(3, 3)` y activaciÃ³n `ReLU`.\n",
    "\n",
    "    2. **Rama 2**:\n",
    "        - Aplica una capa `GaussianKernelLayer` con `sigma=sigmas[1]` sobre la entrada `x`.\n",
    "        - Aplica una capa de convoluciÃ³n 2D con `f2` filtros de tamaÃ±o `(3, 3)` y activaciÃ³n `ReLU`.\n",
    "\n",
    "    3. **Rama 3**:\n",
    "        - Aplica una capa `GaussianKernelLayer` con `sigma=sigmas[2]` sobre la entrada `x`.\n",
    "        - Aplica una capa de convoluciÃ³n 2D con `f3` filtros de tamaÃ±o `(3, 3)` y activaciÃ³n `ReLU`.\n",
    "\n",
    "    Finalmente, las salidas de las tres ramas se concatenan a lo largo del eje de los canales.\n",
    "    \"\"\"\n",
    "\n",
    "    # Filtros\n",
    "    f1, f2, f3 = filters\n",
    "\n",
    "    # Rama 1: Aplicar el kernel Gaussiano seguido de una convoluciÃ³n 2D\n",
    "    branch_k1 = GaussianKernelLayer(sigma=sigmas[0], name=\"gaussian_layer_1\")(x)\n",
    "    branch1 = Conv2D(f1, (3, 3), padding='same', activation='relu')(branch_k1)\n",
    "\n",
    "    # Rama 2: Aplicar el kernel Gaussiano seguido de una convoluciÃ³n 2D\n",
    "    branch_k2 = GaussianKernelLayer(sigma=sigmas[1], name=\"gaussian_layer_2\")(x)\n",
    "    branch2 = Conv2D(f2, (3, 3), padding='same', activation='relu')(branch_k2)\n",
    "\n",
    "    # Rama 3: Aplicar el kernel Gaussiano seguido de una convoluciÃ³n 2D\n",
    "    branch_k3 = GaussianKernelLayer(sigma=sigmas[2], name=\"gaussian_layer_3\")(x)\n",
    "    branch3 = Conv2D(f3, (3, 3), padding='same', activation='relu')(branch_k3)\n",
    "\n",
    "    # Concatenar las salidas de las tres ramas a lo largo del eje de los canales\n",
    "    output = concatenate([branch1, branch2, branch3], axis=-1)\n",
    "\n",
    "    return branch_k1, branch_k2, branch_k3, output\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "82000222",
   "metadata": {
    "papermill": {
     "duration": 0.017712,
     "end_time": "2024-08-14T15:24:37.467805",
     "exception": false,
     "start_time": "2024-08-14T15:24:37.450093",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# **InformaciÃ³n mutua - regularizador**\n",
    "\n",
    "Para calcular la informaciÃ³n mutua, necesitamos de la entropia de Renyi y la entropÃ­a de Renyi conjunta. De modo que usamos esta para hacer que las salidas de los kernels compartan \"la menor informaciÃ³n posible\" con el objetivo de calcular caracterÃ­sticas diferentes."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "4d69cae8",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-14T15:24:37.504518Z",
     "iopub.status.busy": "2024-08-14T15:24:37.503739Z",
     "iopub.status.idle": "2024-08-14T15:24:37.511710Z",
     "shell.execute_reply": "2024-08-14T15:24:37.510817Z"
    },
    "papermill": {
     "duration": 0.028532,
     "end_time": "2024-08-14T15:24:37.513666",
     "exception": false,
     "start_time": "2024-08-14T15:24:37.485134",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "class RenyiMutualInformation(Loss):\n",
    "    def __init__(self, C, **kwargs):\n",
    "        self.C = C\n",
    "        super().__init__(**kwargs)\n",
    "\n",
    "    def call(self, y_true, y_pred):\n",
    "        \"\"\"\n",
    "        y_true: \n",
    "        y_pred: N x (F+1) las F entropÃ­as marginales y la entropÃ­a conjunta\n",
    "        \"\"\"\n",
    "        \n",
    "        F = y_pred.shape[1]-1\n",
    "        entropy,  joint_entropy = tf.split(y_pred, [F,1], axis=-1)\n",
    "        \n",
    "        #Cast todo\n",
    "        entropy = tf.cast(entropy, tf.float64)\n",
    "        joint_entropy = tf.cast(joint_entropy, tf.float64)\n",
    "        log_C = tf.math.log(tf.cast(self.C, tf.float64))\n",
    "        \n",
    "        mutual_information = tf.math.abs((tf.expand_dims(tf.reduce_sum(entropy, axis=-1), axis=-1) - joint_entropy)) / (F * log_C) # normalizado\n",
    "\n",
    "\n",
    "        return mutual_information"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ad8ed565",
   "metadata": {
    "papermill": {
     "duration": 0.016951,
     "end_time": "2024-08-14T15:24:37.547857",
     "exception": false,
     "start_time": "2024-08-14T15:24:37.530906",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## **Renyi Entropy**\n",
    "\n",
    "Esta funciÃ³n recibe un tensor y calcula la entropÃ­a de Renyi para esta teniendo en cuenta la siguiente fÃ³rmula:\n",
    "\n",
    "\\begin{equation}\\label{eq:renyiEntropy}\n",
    "    S_\\alpha(\\tilde{\\mathbf{K}})=\\frac{1}{1-\\alpha}\\log\\left(\\tilde{\\mathbf{K}}^\\alpha\\right),\n",
    "\\end{equation}\n",
    "donde $\\alpha>0$, $\\alpha\\neq1$, $\\tilde{\\mathbf{K}}\\in \\mathbb{R}^{C \\times C}$ tiene los elementos del kernel gaussiano, y $\\text{tr}(\\tilde{\\mathbf{K}})=1.$\n",
    "\n",
    "Se debe normalizar este, por ende se divide por el producto de los elementos diagonales de sus matrices cuadradas"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "f8fb6976",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-14T15:24:37.583114Z",
     "iopub.status.busy": "2024-08-14T15:24:37.582872Z",
     "iopub.status.idle": "2024-08-14T15:24:37.592238Z",
     "shell.execute_reply": "2024-08-14T15:24:37.591374Z"
    },
    "papermill": {
     "duration": 0.029293,
     "end_time": "2024-08-14T15:24:37.594223",
     "exception": false,
     "start_time": "2024-08-14T15:24:37.564930",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def renyi_entropy(K, alpha=2):\n",
    "    \"\"\"\n",
    "    Calcula la entropÃ­a de RÃ©nyi para un tensor de entrada.\n",
    "\n",
    "    ParÃ¡metros:\n",
    "    -----------\n",
    "    K : Tensor\n",
    "        Un tensor de entrada de forma `(N, F, C, C)`, donde:\n",
    "        - N: NÃºmero de muestras en el lote.\n",
    "        - F: NÃºmero de filtros o caracterÃ­sticas.\n",
    "        - C: NÃºmero de canales o dimensiones de las matrices cuadradas dentro del tensor.\n",
    "\n",
    "    alpha : float, opcional\n",
    "        El parÃ¡metro de entropÃ­a de RÃ©nyi. Por defecto es 2.0.\n",
    "        - Cuando `alpha=2`, se aplica una optimizaciÃ³n especÃ­fica para este valor.\n",
    "\n",
    "    Retorna:\n",
    "    --------\n",
    "    Tensor\n",
    "        Un tensor de salida de forma `(N, F)`, que contiene la entropÃ­a de RÃ©nyi calculada para cada muestra y filtro.\n",
    "\n",
    "    DescripciÃ³n:\n",
    "    ------------\n",
    "    La entropÃ­a de RÃ©nyi es una generalizaciÃ³n de la entropÃ­a de Shannon, que depende de un parÃ¡metro `alpha`. Esta funciÃ³n \n",
    "    calcula la entropÃ­a de RÃ©nyi para cada una de las matrices cuadradas en el tensor `K` normalizado.\n",
    "\n",
    "    Pasos:\n",
    "    ------\n",
    "    1. **NormalizaciÃ³n del Kernel**:\n",
    "        - Se normaliza el tensor `K` dividiÃ©ndolo por el producto de los elementos diagonales de sus matrices cuadradas.\n",
    "        - Esta normalizaciÃ³n se realiza para estabilizar el cÃ¡lculo de la entropÃ­a.\n",
    "\n",
    "    2. **CÃ¡lculo de la EntropÃ­a**:\n",
    "        - Si `alpha=2`, se utiliza una optimizaciÃ³n que calcula la traza del producto matricial de `X` consigo mismo.\n",
    "        - Para otros valores de `alpha`, se calculan los autovalores de `X` y se utiliza la fÃ³rmula general para la entropÃ­a de RÃ©nyi.\n",
    "\n",
    "    Ejemplo de Uso:\n",
    "    ---------------\n",
    "    ```python\n",
    "    # Crear un tensor de ejemplo con la forma (N, F, C, C)\n",
    "    K = tf.random.normal((32, 10, 64, 64))\n",
    "\n",
    "    # Calcular la entropÃ­a de RÃ©nyi con alpha = 2\n",
    "    entropy = renyi_entropy(K, alpha=2)\n",
    "    print(entropy.shape)  # Salida: (32, 10)\n",
    "    ```\n",
    "\n",
    "    Notas:\n",
    "    ------\n",
    "    - La entropÃ­a de RÃ©nyi con `alpha=2` es especialmente Ãºtil en contextos donde se desea penalizar grandes concentraciones de probabilidad,\n",
    "      debido a que esta mÃ©trica es mÃ¡s sensible a distribuciones con pocos eventos de alta probabilidad.\n",
    "    - La funciÃ³n retorna la entropÃ­a negativa, lo que es estÃ¡ndar en la teorÃ­a de la informaciÃ³n, ya que una mayor concentraciÃ³n \n",
    "      de probabilidad corresponde a una menor entropÃ­a.\n",
    "    \"\"\"\n",
    "\n",
    "    # Obtener el nÃºmero de canales\n",
    "    C = K.shape[-1]\n",
    "\n",
    "    # Normalizamos el kernel antes de calcular la entropÃ­a\n",
    "\n",
    "    # Crear una mÃ¡scara para obtener los elementos diagonales\n",
    "    diag = tf.expand_dims(tf.linalg.diag_part(K), -1)\n",
    "    # Calcular el producto de los elementos diagonales\n",
    "    denominator = tf.math.sqrt(tf.linalg.matmul(diag, diag, transpose_b=True))\n",
    "    # NormalizaciÃ³n\n",
    "\n",
    "    X = (1/C) * tf.math.divide(K, denominator)\n",
    "    if alpha == 2:\n",
    "        # Realiza el producto matricial entre las dos Ãºltimas dimensiones\n",
    "        X_matmul = tf.linalg.matmul(X, X)\n",
    "        return -tf.math.log(tf.linalg.trace(X_matmul))\n",
    "    else:\n",
    "        # Calcula los autovalores y autovectores de las dos Ãºltimas dimensiones\n",
    "        e, _ = tf.linalg.eigh(X)\n",
    "        # Calcula la entropÃ­a de Renyi\n",
    "        return (tf.math.log(tf.reduce_sum(tf.math.real(tf.math.pow(e, alpha)), axis=-1)) / (1 - alpha))\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0835cdeb",
   "metadata": {
    "papermill": {
     "duration": 0.01696,
     "end_time": "2024-08-14T15:24:37.628155",
     "exception": false,
     "start_time": "2024-08-14T15:24:37.611195",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### **Ejemplo de uso**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "2453896e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-14T15:24:37.664103Z",
     "iopub.status.busy": "2024-08-14T15:24:37.663815Z",
     "iopub.status.idle": "2024-08-14T15:24:39.189403Z",
     "shell.execute_reply": "2024-08-14T15:24:39.188468Z"
    },
    "papermill": {
     "duration": 1.546503,
     "end_time": "2024-08-14T15:24:39.191636",
     "exception": false,
     "start_time": "2024-08-14T15:24:37.645133",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(32, 10)\n"
     ]
    }
   ],
   "source": [
    "# Crear un tensor de ejemplo con la forma (N, F, C, C)\n",
    "K = tf.random.normal((32, 10, 64, 64),mean = 10,stddev=1)\n",
    "\n",
    "# Calcular la entropÃ­a de RÃ©nyi con alpha = 2\n",
    "entropy = renyi_entropy(K, alpha=2)\n",
    "print(entropy.shape)  # Salida: (32, 10)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "069840be",
   "metadata": {
    "papermill": {
     "duration": 0.016927,
     "end_time": "2024-08-14T15:24:39.226117",
     "exception": false,
     "start_time": "2024-08-14T15:24:39.209190",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## **Joint Renyi Entropy**\n",
    "\n",
    "Calculamos la entropÃ­a de $\\alpha$-Renyi conjunta de la siguiente manera:\n",
    "\n",
    "\\begin{equation}\\label{eq:jointREntropy}\n",
    "    S_\\alpha(\\tilde{\\mathbf{K}}_g, \\tilde{\\mathbf{K}}_{g'})=S_\\alpha\\left(\\frac{\\tilde{\\mathbf{K}}_g\\circ \\tilde{\\mathbf{K}}_{g'}}{\\text{tr}(\\tilde{\\mathbf{K}}_g\\circ \\tilde{\\mathbf{K}}_{g'})}\\right).\n",
    "\\end{equation} \n",
    "$\\circ$ es el producto de Hadamard."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5e039b64",
   "metadata": {
    "papermill": {
     "duration": 0.017848,
     "end_time": "2024-08-14T15:24:39.261216",
     "exception": false,
     "start_time": "2024-08-14T15:24:39.243368",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "f8e6b746",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-14T15:24:39.339902Z",
     "iopub.status.busy": "2024-08-14T15:24:39.339556Z",
     "iopub.status.idle": "2024-08-14T15:24:39.348974Z",
     "shell.execute_reply": "2024-08-14T15:24:39.348113Z"
    },
    "papermill": {
     "duration": 0.029902,
     "end_time": "2024-08-14T15:24:39.350808",
     "exception": false,
     "start_time": "2024-08-14T15:24:39.320906",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def joint_renyi_entropy(K, alpha):\n",
    "    \"\"\"\n",
    "    Calcula la entropÃ­a conjunta de RÃ©nyi para un tensor de entrada.\n",
    "\n",
    "    ParÃ¡metros:\n",
    "    -----------\n",
    "    K : Tensor\n",
    "        Un tensor de entrada de forma `(N, F, C, C)`, donde:\n",
    "        - N: NÃºmero de muestras en el lote.\n",
    "        - F: NÃºmero de filtros o caracterÃ­sticas.\n",
    "        - C: NÃºmero de canales o dimensiones de las matrices cuadradas dentro del tensor.\n",
    "\n",
    "    alpha : float\n",
    "        El parÃ¡metro de entropÃ­a de RÃ©nyi. Controla la sensibilidad de la mÃ©trica a diferentes distribuciones de probabilidad.\n",
    "\n",
    "    Retorna:\n",
    "    --------\n",
    "    Tensor\n",
    "        Un tensor de salida de forma `(N, 1)`, que contiene la entropÃ­a conjunta de RÃ©nyi calculada para cada muestra.\n",
    "\n",
    "    DescripciÃ³n:\n",
    "    ------------\n",
    "    Esta funciÃ³n calcula la entropÃ­a conjunta de RÃ©nyi, la cual mide la cantidad de incertidumbre en un sistema considerando mÃºltiples variables conjuntamente. La entropÃ­a conjunta es Ãºtil para evaluar la dependencia o interrelaciÃ³n entre variables.\n",
    "\n",
    "    Pasos:\n",
    "    ------\n",
    "    1. **Producto de los TÃ©rminos del Tensor**:\n",
    "        - Se realiza un producto a lo largo de la dimensiÃ³n `F` del tensor `K`, reduciendo asÃ­ el tensor de `(N, F, C, C)` a `(N, C, C)`.\n",
    "\n",
    "    2. **CÃ¡lculo de la Traza**:\n",
    "        - Se calcula la traza del tensor resultante, que es la suma de los elementos en la diagonal principal de las matrices cuadradas en `(N, C, C)`.\n",
    "        - La traza se expande y se repite para hacerla compatible con la dimensionalidad del tensor `K`.\n",
    "\n",
    "    3. **NormalizaciÃ³n**:\n",
    "        - Se normaliza el producto obtenido en el primer paso dividiÃ©ndolo por la traza expandida, lo que estabiliza el cÃ¡lculo de la entropÃ­a.\n",
    "\n",
    "    4. **CÃ¡lculo de la EntropÃ­a Conjunta**:\n",
    "        - Se pasa el tensor normalizado a la funciÃ³n `renyi_entropy`, que calcula la entropÃ­a de RÃ©nyi considerando la interrelaciÃ³n entre las variables.\n",
    "\n",
    "    Ejemplo de Uso:\n",
    "    ---------------\n",
    "    ```python\n",
    "    # Crear un tensor de ejemplo con la forma (N, F, C, C)\n",
    "    K = tf.random.normal((32, 10, 64, 64))\n",
    "\n",
    "    # Calcular la entropÃ­a conjunta de RÃ©nyi con alpha = 2\n",
    "    joint_entropy = joint_renyi_entropy(K, alpha=2)\n",
    "    print(joint_entropy.shape)  # Salida: (32, 1)\n",
    "    ```\n",
    "\n",
    "    Notas:\n",
    "    ------\n",
    "    - La entropÃ­a conjunta de RÃ©nyi es particularmente Ãºtil cuando se quiere evaluar la cantidad de informaciÃ³n compartida entre mÃºltiples variables.\n",
    "    - Al utilizar diferentes valores de `alpha`, se puede ajustar la sensibilidad de la mÃ©trica para enfatizar distribuciones de probabilidad mÃ¡s concentradas o mÃ¡s dispersas.\n",
    "    \"\"\"\n",
    "\n",
    "    # Obtener el nÃºmero de canales\n",
    "    C = K.shape[-1]\n",
    "    \n",
    "    # Producto de los tÃ©rminos a lo largo de la dimensiÃ³n F\n",
    "    product = tf.reduce_prod(K, axis=1)  # (N, C, C)\n",
    "    \n",
    "    # Calcular la traza de las matrices cuadradas\n",
    "    trace = tf.linalg.trace(product)\n",
    "    trace = tf.expand_dims(tf.expand_dims(trace, axis=-1), axis=-1)\n",
    "    trace = tf.tile(trace, [1, C, C])\n",
    "\n",
    "    # Normalizar el producto\n",
    "    argument = product / trace\n",
    "    argument = tf.expand_dims(argument, axis=1)  # Se necesita porque renyi_entropy recibe 4 dimensiones (1, C, C)\n",
    "    \n",
    "    # Calcular la entropÃ­a conjunta usando la funciÃ³n renyi_entropy\n",
    "    joint_entropy = renyi_entropy(argument, alpha=alpha)\n",
    "    \n",
    "    return joint_entropy\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6e95a398",
   "metadata": {
    "papermill": {
     "duration": 0.017147,
     "end_time": "2024-08-14T15:24:39.385368",
     "exception": false,
     "start_time": "2024-08-14T15:24:39.368221",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### **Ejemplo de uso**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "d4580394",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-14T15:24:39.421471Z",
     "iopub.status.busy": "2024-08-14T15:24:39.421168Z",
     "iopub.status.idle": "2024-08-14T15:24:39.446621Z",
     "shell.execute_reply": "2024-08-14T15:24:39.445665Z"
    },
    "papermill": {
     "duration": 0.045914,
     "end_time": "2024-08-14T15:24:39.448574",
     "exception": false,
     "start_time": "2024-08-14T15:24:39.402660",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(32, 1)\n"
     ]
    }
   ],
   "source": [
    "# Crear un tensor de ejemplo con la forma (N, F, C, C)\n",
    "K = tf.random.normal((32, 10, 64, 64))\n",
    "\n",
    "# Calcular la entropÃ­a conjunta de RÃ©nyi con alpha = 2\n",
    "joint_entropy = joint_renyi_entropy(K, alpha=2)\n",
    "print(joint_entropy.shape)  # Salida: (32, 1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b7ccc843",
   "metadata": {
    "papermill": {
     "duration": 0.017146,
     "end_time": "2024-08-14T15:24:39.483135",
     "exception": false,
     "start_time": "2024-08-14T15:24:39.465989",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## **InformaciÃ³n mutua**\n",
    "\n",
    "La informaciÃ³n mutua $\\alpha$-Renyi se calcula de la siguiente manera:\n",
    "\n",
    "Dando un conjunto de kernels gaussianos $\\{\\tilde{\\mathbf{K}}_g\\}_{g=1}^{G}$:\n",
    "\n",
    "\\begin{equation}\\label{eq:MIRenyi}\n",
    "I_\\alpha\\left(\\{\\tilde{\\mathbf{K}}_g\\}_{g=1}^{G}\\right) = \\sum_{g=1}^G S_\\alpha(\\tilde{\\mathbf{K}}_g) - S_\\alpha\\left(\\frac{\\prod_{g=1}^G \\tilde{\\mathbf{K}}_g}{\\text{tr}\\left(\\prod_{g=1}^G \\tilde{\\mathbf{K}}_g\\right)}\\right). \n",
    "\\end{equation}\n",
    "\n",
    "Y a partir de esta, construÃ­mos el loss que nos ayudarÃ¡ a regularizar:\n",
    "\n",
    "$$\\mathcal{L}_\\alpha(M)=I_\\alpha\\left(\\{\\tilde{\\mathbf{K}}_g(\\mathcal{M})\\}_{g=1}^{G}\\right)$$\n",
    "\n",
    "donde $\\mathcal{M}$ es el modelo de deep learning. \n",
    "\n",
    "AdemÃ¡s, normalizamos la informaciÃ³n mutua de la siguiente manera:\n",
    "\n",
    "Sabemos que $H_\\alpha(K)\\leq H_\\alpha(\\frac{1}{N}\\mathbf{I}) $ donde N es el tamaÃ±o del kernel cuadrado ($N\\times N$)\n",
    "\n",
    "Por lo tanto, \n",
    "\n",
    "\n",
    "\\begin{align}\n",
    "I_\\alpha(K_1, K_2, \\dots, K_F) &= \\sum_{f=1}^F H_\\alpha(K_f)-H_\\alpha\\left(K_1, K_2, \\dots, K_F\\right) \\\\\n",
    "                   &\\leq \\sum_{f=1}^F H_\\alpha(K_f) \\\\\n",
    "                   &\\leq \\sum_{f=1}^F H_\\alpha\\left(\\frac{1}{N}\\mathbf{I}\\right) \\\\\n",
    "                   &\\leq F \\cdot H_\\alpha\\left(\\frac{1}{N}\\mathbf{I}\\right)\n",
    "\\end{align}\n",
    "\n",
    "\n",
    "Por otro lado,\n",
    "\\begin{align*}\n",
    "H_\\alpha\\left(\\frac{1}{N}\\mathbf{I}\\right)&= \\frac{1}{1-\\alpha}log\\left(tr\\left(\\frac{1}{N^\\alpha} \\mathbf{I} \\right)\\right)\\\\\n",
    "                                          &= \\frac{1}{1-\\alpha}log\\left(\\frac{N}{N^\\alpha} \\right)\\\\\n",
    "                                          &= \\frac{1}{1-\\alpha}log\\left(N^{1-\\alpha} \\right)\\\\\n",
    "                                          &= log(N)\n",
    "\\end{align*}\n",
    "\n",
    "Por lo tanto, podemos concluir que \n",
    "\n",
    "$$I_\\alpha(K_1, K_2, \\dots, K_F) \\leq F log(N)$$"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "cbfb22c7",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-14T15:24:39.520697Z",
     "iopub.status.busy": "2024-08-14T15:24:39.519782Z",
     "iopub.status.idle": "2024-08-14T15:24:39.531454Z",
     "shell.execute_reply": "2024-08-14T15:24:39.530577Z"
    },
    "papermill": {
     "duration": 0.032578,
     "end_time": "2024-08-14T15:24:39.533326",
     "exception": false,
     "start_time": "2024-08-14T15:24:39.500748",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "class RenyiMutualInformation(Loss):\n",
    "    def __init__(self, C, **kwargs):\n",
    "        \"\"\"\n",
    "        Inicializa la clase RenyiMutualInformation.\n",
    "\n",
    "        ParÃ¡metros:\n",
    "        -----------\n",
    "        C : int o float\n",
    "            El nÃºmero de canales (dimensiÃ³n C) utilizado para la normalizaciÃ³n en el cÃ¡lculo de la informaciÃ³n mutua.\n",
    "        kwargs : dict\n",
    "            Otros argumentos opcionales que se pasan a la clase base `Loss`.\n",
    "        \"\"\"\n",
    "        self.C = C\n",
    "        super().__init__(**kwargs)\n",
    "\n",
    "    def call(self, y_true, y_pred):\n",
    "        \"\"\"\n",
    "        Calcula la pÃ©rdida basada en la informaciÃ³n mutua de RÃ©nyi.\n",
    "\n",
    "        ParÃ¡metros:\n",
    "        -----------\n",
    "        y_true : Tensor\n",
    "            Etiquetas verdaderas, no se utilizan en este cÃ¡lculo de pÃ©rdida, pero se requieren para cumplir con la API de Keras.\n",
    "\n",
    "        y_pred : Tensor\n",
    "            Tensor de predicciones de forma `(N, F+1)`, donde:\n",
    "            - N: NÃºmero de muestras en el lote.\n",
    "            - F: NÃºmero de entropÃ­as marginales.\n",
    "            - F+1: La Ãºltima columna contiene la entropÃ­a conjunta.\n",
    "\n",
    "        Retorna:\n",
    "        --------\n",
    "        Tensor\n",
    "            Un tensor de pÃ©rdida de forma `(N, 1)`, que contiene la informaciÃ³n mutua de RÃ©nyi calculada para cada muestra.\n",
    "\n",
    "        DescripciÃ³n:\n",
    "        ------------\n",
    "        Esta clase implementa una pÃ©rdida basada en la informaciÃ³n mutua de RÃ©nyi, que es una medida de la cantidad de informaciÃ³n que comparten dos o mÃ¡s variables. En este caso, se utiliza para evaluar quÃ© tan bien las predicciones del modelo reflejan la dependencia entre diferentes caracterÃ­sticas.\n",
    "\n",
    "        Pasos:\n",
    "        ------\n",
    "        1. **SeparaciÃ³n de EntropÃ­as**:\n",
    "            - Se divide el tensor `y_pred` en dos partes: `entropy` que contiene las entropÃ­as marginales de cada caracterÃ­stica, y `joint_entropy` que contiene la entropÃ­a conjunta.\n",
    "\n",
    "        2. **Casteo de Tipos**:\n",
    "            - Se asegura de que tanto las entropÃ­as marginales como la entropÃ­a conjunta estÃ©n en formato `tf.float64` para una mayor precisiÃ³n en los cÃ¡lculos.\n",
    "\n",
    "        3. **CÃ¡lculo del Logaritmo de `C`**:\n",
    "            - Se calcula el logaritmo natural de `C` (`log_C`), que es un valor constante utilizado en la normalizaciÃ³n del cÃ¡lculo.\n",
    "\n",
    "        4. **CÃ¡lculo de la InformaciÃ³n Mutua de RÃ©nyi**:\n",
    "            - Se calcula la suma de las entropÃ­as marginales, se resta la entropÃ­a conjunta y se normaliza por `F * log_C` para obtener la informaciÃ³n mutua de RÃ©nyi normalizada.\n",
    "\n",
    "        Ejemplo de Uso:\n",
    "        ---------------\n",
    "        ```python\n",
    "        # Definir la pÃ©rdida en el modelo\n",
    "        model.compile(optimizer='adam', loss=[NormalizedBinaryCrossentropy(), RenyiMutualInformation(C=64)], loss_weights=[0.8, 0.2])\n",
    "        ```\n",
    "\n",
    "        Notas:\n",
    "        ------\n",
    "        - Esta clase estÃ¡ diseÃ±ada para trabajar en conjunto con un modelo que genere tanto las entropÃ­as marginales como la entropÃ­a conjunta como salidas.\n",
    "        - La informaciÃ³n mutua de RÃ©nyi es Ãºtil en tareas donde es importante evaluar la cantidad de informaciÃ³n compartida entre diferentes caracterÃ­sticas o seÃ±ales.\n",
    "        \"\"\"\n",
    "        \n",
    "        # NÃºmero de entropÃ­as marginales\n",
    "        F = y_pred.shape[1] - 1\n",
    "        \n",
    "        # Separar entropÃ­as marginales y entropÃ­a conjunta\n",
    "        entropy, joint_entropy = tf.split(y_pred, [F, 1], axis=-1)\n",
    "        \n",
    "        # Convertir a tf.float64\n",
    "        entropy = tf.cast(entropy, tf.float64)\n",
    "        joint_entropy = tf.cast(joint_entropy, tf.float64)\n",
    "        log_C = tf.math.log(tf.cast(self.C, tf.float64))\n",
    "        \n",
    "        # Calcular la informaciÃ³n mutua de RÃ©nyi\n",
    "        mutual_information = tf.math.abs(\n",
    "            (tf.expand_dims(tf.reduce_sum(entropy, axis=-1), axis=-1) - joint_entropy)\n",
    "        ) / (F * log_C)  # NormalizaciÃ³n\n",
    "\n",
    "        return mutual_information\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b0a1e412",
   "metadata": {
    "papermill": {
     "duration": 0.018132,
     "end_time": "2024-08-14T15:24:39.569464",
     "exception": false,
     "start_time": "2024-08-14T15:24:39.551332",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# **Normalized cross-entropy**"
   ]
  },
  {
   "attachments": {
    "8d0299cf-0448-4c8c-8929-80deb2e60210.png": {
     "image/png": ""
    }
   },
   "cell_type": "markdown",
   "id": "ff745fbf",
   "metadata": {
    "papermill": {
     "duration": 0.017645,
     "end_time": "2024-08-14T15:24:39.605265",
     "exception": false,
     "start_time": "2024-08-14T15:24:39.587620",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "AdemÃ¡s, para garantizar que la entropÃ­a cruzada tambiÃ©n estÃ© normalizada usamos la fÃ³rmula propuesta en [https://proceedings.mlr.press/v119/ma20c.html](http://)\n",
    "\n",
    "![image.png](attachment:8d0299cf-0448-4c8c-8929-80deb2e60210.png)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "b503eccb",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-14T15:24:39.642307Z",
     "iopub.status.busy": "2024-08-14T15:24:39.642000Z",
     "iopub.status.idle": "2024-08-14T15:24:39.653176Z",
     "shell.execute_reply": "2024-08-14T15:24:39.652282Z"
    },
    "papermill": {
     "duration": 0.032436,
     "end_time": "2024-08-14T15:24:39.655507",
     "exception": false,
     "start_time": "2024-08-14T15:24:39.623071",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "class NormalizedBinaryCrossentropy(Loss):\n",
    "    def __init__(self, **kwargs):\n",
    "        \"\"\"\n",
    "        Inicializa la clase NormalizedBinaryCrossentropy.\n",
    "\n",
    "        ParÃ¡metros:\n",
    "        -----------\n",
    "        kwargs : dict\n",
    "            Argumentos opcionales que se pasan a la clase base `Loss`.\n",
    "        \"\"\"\n",
    "        super().__init__(**kwargs)\n",
    "\n",
    "    def call(self, y_true, y_pred):\n",
    "        \"\"\"\n",
    "        Calcula la pÃ©rdida de entropÃ­a cruzada binaria normalizada.\n",
    "\n",
    "        ParÃ¡metros:\n",
    "        -----------\n",
    "        y_true : Tensor\n",
    "            Tensor de etiquetas verdaderas de forma `(N, 2)`, donde:\n",
    "            - N: NÃºmero de muestras en el lote.\n",
    "            - 2: Corresponde a las clases binarias (0 o 1).\n",
    "\n",
    "        y_pred : Tensor\n",
    "            Tensor de predicciones de forma `(N, 2)`, donde:\n",
    "            - N: NÃºmero de muestras en el lote.\n",
    "            - 2: Predicciones de probabilidad para las dos clases binarias.\n",
    "\n",
    "        Retorna:\n",
    "        --------\n",
    "        Tensor\n",
    "            Un tensor de pÃ©rdida de forma `(N,)`, que contiene la pÃ©rdida de entropÃ­a cruzada binaria normalizada para cada muestra.\n",
    "\n",
    "        DescripciÃ³n:\n",
    "        ------------\n",
    "        Esta clase implementa una versiÃ³n normalizada de la pÃ©rdida de entropÃ­a cruzada binaria. La entropÃ­a cruzada binaria es una medida de la disimilitud entre dos distribuciones de probabilidad, a menudo utilizada como una funciÃ³n de pÃ©rdida en problemas de clasificaciÃ³n binaria.\n",
    "\n",
    "        En esta implementaciÃ³n, la pÃ©rdida de entropÃ­a cruzada se normaliza utilizando las pÃ©rdidas teÃ³ricas asociadas a las etiquetas `[1, 0]` y `[0, 1]`, que representan las dos clases posibles. La normalizaciÃ³n tiene como objetivo ajustar la pÃ©rdida para que sea mÃ¡s robusta frente a distribuciones de probabilidad sesgadas.\n",
    "\n",
    "        Pasos:\n",
    "        ------\n",
    "        1. **CÃ¡lculo de la EntropÃ­a Cruzada Binaria**:\n",
    "            - Se calcula la pÃ©rdida de entropÃ­a cruzada binaria estÃ¡ndar entre `y_true` y `y_pred`.\n",
    "\n",
    "        2. **CÃ¡lculo de la PÃ©rdida para Etiquetas TeÃ³ricas**:\n",
    "            - Se generan las pÃ©rdidas teÃ³ricas `cce_left` y `cce_right` utilizando las etiquetas `[1.0, 0.0]` y `[0.0, 1.0]` respectivamente.\n",
    "\n",
    "        3. **NormalizaciÃ³n**:\n",
    "            - La pÃ©rdida original se divide por la suma de las pÃ©rdidas teÃ³ricas, obteniendo asÃ­ una versiÃ³n normalizada de la pÃ©rdida.\n",
    "\n",
    "        Ejemplo de Uso:\n",
    "        ---------------\n",
    "        ```python\n",
    "        # Definir la pÃ©rdida en el modelo\n",
    "        model.compile(optimizer='adam', loss=NormalizedBinaryCrossentropy())\n",
    "        ```\n",
    "\n",
    "        Notas:\n",
    "        ------\n",
    "        - Esta pÃ©rdida es Ãºtil en casos donde se desea mitigar el impacto de clases desbalanceadas, ya que la normalizaciÃ³n ajusta la magnitud de la pÃ©rdida en funciÃ³n de las predicciones teÃ³ricas.\n",
    "        - La normalizaciÃ³n ayuda a hacer que el aprendizaje sea mÃ¡s estable y menos sensible a predicciones con alta confianza errÃ³nea.\n",
    "        \"\"\"\n",
    "        \n",
    "        # Obtener el tamaÃ±o del lote\n",
    "        batch_size = tf.shape(y_pred)[0]  \n",
    "        batch_size_float = tf.cast(batch_size, tf.float32)\n",
    "        \n",
    "        # Calcular la entropÃ­a cruzada binaria estÃ¡ndar\n",
    "        cce = tf.keras.losses.binary_crossentropy(y_true, y_pred)\n",
    "        \n",
    "        # Crear etiquetas teÃ³ricas para cada clase\n",
    "        left = tf.tile(tf.expand_dims([1.0, 0.0], axis=0), [batch_size, 1])\n",
    "        right = tf.tile(tf.expand_dims([0.0, 1.0], axis=0), [batch_size, 1])\n",
    "        \n",
    "        # Calcular la entropÃ­a cruzada binaria para las etiquetas teÃ³ricas\n",
    "        cce_left = tf.keras.losses.binary_crossentropy(left, y_pred)\n",
    "        cce_right = tf.keras.losses.binary_crossentropy(right, y_pred)\n",
    "        \n",
    "        # Normalizar la entropÃ­a cruzada binaria estÃ¡ndar\n",
    "        cce_norm = tf.divide(cce, (cce_left + cce_right))\n",
    "        \n",
    "        return cce_norm"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "dcb78cc0",
   "metadata": {
    "papermill": {
     "duration": 0.017223,
     "end_time": "2024-08-14T15:24:39.690712",
     "exception": false,
     "start_time": "2024-08-14T15:24:39.673489",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# **Modelo GMRRNet**\n",
    "\n",
    "Se debe tener en cuenta que el loss total usado es la combinaciÃ³n de los dos anteriores:\n",
    "\n",
    "\\begin{equation}\\label{eq:GMRRloss}\n",
    "\\mathcal{L}(\\mathbf{y},\\hat{\\mathbf{y}}|\\mathcal{M}) = -\\lambda\\sum_{q=1}^Q y_q\\log(\\hat{y}_q(\\mathcal{M})) + (1-\\lambda) I_\\alpha\\left(\\{\\tilde{\\mathbf{K}}_g(\\mathcal{M})\\}_{g=1}^{G}\\right),\n",
    "\\end{equation}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "ee236366",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-14T15:24:39.727145Z",
     "iopub.status.busy": "2024-08-14T15:24:39.726855Z",
     "iopub.status.idle": "2024-08-14T15:24:39.743424Z",
     "shell.execute_reply": "2024-08-14T15:24:39.742595Z"
    },
    "papermill": {
     "duration": 0.037209,
     "end_time": "2024-08-14T15:24:39.745436",
     "exception": false,
     "start_time": "2024-08-14T15:24:39.708227",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def KernelConvInceptionMI(nb_classes=2, Chans=64, Samples=320, \n",
    "                          kernLength=64, norm_rate=0.25, alpha=2): \n",
    "    \"\"\"\n",
    "    Construye un modelo de red neuronal convolucional basado en bloques de Inception con capas de convoluciÃ³n y cÃ¡lculo de entropÃ­a de Renyi.\n",
    "\n",
    "    ParÃ¡metros:\n",
    "    -----------\n",
    "    nb_classes : int, opcional (default=2)\n",
    "        NÃºmero de clases de salida para la clasificaciÃ³n.\n",
    "    \n",
    "    Chans : int, opcional (default=64)\n",
    "        NÃºmero de canales de entrada (dimensiÃ³n espacial).\n",
    "    \n",
    "    Samples : int, opcional (default=320)\n",
    "        NÃºmero de muestras de entrada (dimensiÃ³n temporal).\n",
    "    \n",
    "    kernLength : int, opcional (default=64)\n",
    "        Longitud del kernel para la primera capa convolucional.\n",
    "    \n",
    "    norm_rate : float, opcional (default=0.25)\n",
    "        Tasa de normalizaciÃ³n para la regularizaciÃ³n en capas densas.\n",
    "    \n",
    "    alpha : int, opcional (default=2)\n",
    "        ParÃ¡metro de orden para la entropÃ­a de Renyi, donde alpha=2 representa la entropÃ­a de Renyi cuadrÃ¡tica.\n",
    "\n",
    "    Retorna:\n",
    "    --------\n",
    "    model : tf.keras.Model\n",
    "        El modelo de red neuronal compilado listo para ser entrenado.\n",
    "    \n",
    "    DescripciÃ³n:\n",
    "    ------------\n",
    "    Esta funciÃ³n crea y compila un modelo de red neuronal convolucional con las siguientes caracterÃ­sticas:\n",
    "\n",
    "    1. **Entrada**:\n",
    "        - La entrada es un tensor de 4D de forma `(Chans, Samples, 1)`, donde `Chans` es el nÃºmero de canales (dimensiÃ³n espacial) y `Samples` es el nÃºmero de muestras (dimensiÃ³n temporal).\n",
    "\n",
    "    2. **Primera Capa Convolucional**:\n",
    "        - Una capa convolucional `Conv2D` con `F1=3` filtros y un kernel de longitud `kernLength=64`.\n",
    "\n",
    "    3. **Bloque de Inception**:\n",
    "        - Un bloque de Inception personalizado que aplica un filtro gaussiano con diferentes sigmas y pasa los resultados a una convoluciÃ³n `Conv2D`.\n",
    "        - Se utilizan tres sigmas diferentes: `sigma1=0.8`, `sigma2=2.2`, y `sigma3=4.8`.\n",
    "        - Se aplican tres convoluciones `Conv2D` con `F2=5` filtros cada una y se concatenan sus salidas.\n",
    "\n",
    "    4. **CÃ¡lculo de la EntropÃ­a de Renyi**:\n",
    "        - Las salidas de las capas de kernel gaussiano del bloque de Inception se concatenan y se calcula la entropÃ­a de Renyi marginal y conjunta usando la funciÃ³n `renyi_entropy` y `joint_renyi_entropy`, respectivamente.\n",
    "\n",
    "    5. **Capas Finales**:\n",
    "        - Se aÃ±ade otra capa convolucional `Conv2D` con `F3=3` filtros seguida de una capa de normalizaciÃ³n por lotes (`BatchNormalization`), aplanamiento (`Flatten`), y dos capas densas con una funciÃ³n de activaciÃ³n `softmax` para la salida final.\n",
    "\n",
    "    6. **CompilaciÃ³n del Modelo**:\n",
    "        - El modelo se compila con el optimizador `Adam`.\n",
    "        - Se utiliza una combinaciÃ³n de dos funciones de pÃ©rdida:\n",
    "            1. `NormalizedBinaryCrossentropy`: Una pÃ©rdida normalizada de entropÃ­a cruzada binaria.\n",
    "            2. `RenyiMutualInformation`: Una pÃ©rdida basada en la informaciÃ³n mutua de Renyi entre las entropÃ­as calculadas.\n",
    "        - Las pÃ©rdidas se ponderan con `loss_weights=[0.8, 0.2]`.\n",
    "\n",
    "    Ejemplo de Uso:\n",
    "    ---------------\n",
    "    ```python\n",
    "    model = KernelConvInceptionMI(nb_classes=2, Chans=64, Samples=320, kernLength=64, norm_rate=0.25, alpha=2)\n",
    "    model.summary()\n",
    "    ```\n",
    "    \n",
    "    Notas:\n",
    "    ------\n",
    "    - Este modelo es adecuado para tareas de clasificaciÃ³n binaria o multi-clase donde es importante capturar relaciones complejas entre caracterÃ­sticas utilizando bloques de Inception.\n",
    "    - La inclusiÃ³n de la entropÃ­a de Renyi como una medida adicional puede mejorar la robustez del modelo en escenarios con incertidumbre.\n",
    "    \"\"\"\n",
    "    \n",
    "    ###### DefiniciÃ³n de los filtros para las capas convolucionales\n",
    "    F1 = 3\n",
    "    F2 = 5\n",
    "    F3 = 3\n",
    "    \n",
    "    ###### DefiniciÃ³n de la entrada\n",
    "    input1 = Input(shape=(Chans, Samples, 1))\n",
    "\n",
    "    ##################################################################\n",
    "    # Primera capa convolucional con normalizaciÃ³n por lotes\n",
    "    conv2D = Conv2D(F1, (1, kernLength), padding='same',\n",
    "                    name='Conv2D_1',\n",
    "                    input_shape=(Chans, Samples, 1),\n",
    "                    use_bias=False)(input1)\n",
    "    block1 = BatchNormalization()(conv2D)\n",
    "    \n",
    "    # DefiniciÃ³n de los sigmas para el bloque de Inception\n",
    "    sigma1 = 0.8\n",
    "    sigma2 = 2.2\n",
    "    sigma3 = 4.8\n",
    "\n",
    "    # Bloque de Inception\n",
    "    branch_k1, branch_k2, branch_k3, inception = inception_block(block1, [F2, F2, F2], [sigma1, sigma2, sigma3])\n",
    "    \n",
    "    ##############\n",
    "    \n",
    "    # ConcatenaciÃ³n de las ramas del bloque de Inception para el cÃ¡lculo de entropÃ­as\n",
    "    concatenated_branches = concatenate([branch_k1, branch_k2, branch_k3], axis=-1)\n",
    "    concatenated_branches = tf.transpose(concatenated_branches, perm=(0, 3, 1, 2))\n",
    "    layer_entropy = Lambda(lambda x: renyi_entropy(x, alpha=alpha), name=\"entropy\")(concatenated_branches)\n",
    "    \n",
    "    layer_joint_entropy = Lambda(lambda x: joint_renyi_entropy(x, alpha=alpha), name=\"joint_entropy\")(concatenated_branches)\n",
    "    \n",
    "    concatenate_entropies = concatenate([layer_entropy, layer_joint_entropy], axis=-1, name=\"concatenated_entropies\")\n",
    "    \n",
    "    ###############\n",
    "    # Segunda capa convolucional con normalizaciÃ³n por lotes y aplanamiento\n",
    "    conv2D = Conv2D(F3, 3, padding='same',\n",
    "                    name='Conv2D_2')(inception)\n",
    "    \n",
    "    conv2D = BatchNormalization()(conv2D)\n",
    "    flatten = Flatten(name='flatten')(conv2D)\n",
    "    \n",
    "    # Capas densas con activaciÃ³n y normalizaciÃ³n\n",
    "    dense = Dense(64, kernel_constraint=max_norm(norm_rate), activation=\"relu\")(flatten)\n",
    "    dense = Dense(nb_classes, name='output', \n",
    "                  kernel_constraint=max_norm(norm_rate))(dense)\n",
    "    softmax = Activation('softmax', name='out_activation')(dense)\n",
    "    \n",
    "    # CreaciÃ³n del modelo\n",
    "    model = Model(inputs=input1, outputs=[softmax, concatenate_entropies])    \n",
    "    \n",
    "    # CompilaciÃ³n del modelo\n",
    "    model.compile(optimizer='adam', \n",
    "                  loss=[NormalizedBinaryCrossentropy(), RenyiMutualInformation(C=tf.cast(64.0, tf.float64), name='MutualInfo')], \n",
    "                  loss_weights=[0.8, 0.2], \n",
    "                  metrics=[['binary_accuracy'], [None]])\n",
    "    \n",
    "    return model\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e5847cc6",
   "metadata": {
    "papermill": {
     "duration": 0.016974,
     "end_time": "2024-08-14T15:24:39.779927",
     "exception": false,
     "start_time": "2024-08-14T15:24:39.762953",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## **Ejemplo de entrenamiento** "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "22d159bc",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-14T15:24:39.816495Z",
     "iopub.status.busy": "2024-08-14T15:24:39.815961Z",
     "iopub.status.idle": "2024-08-14T15:26:04.149542Z",
     "shell.execute_reply": "2024-08-14T15:26:04.148509Z"
    },
    "papermill": {
     "duration": 84.354915,
     "end_time": "2024-08-14T15:26:04.151968",
     "exception": false,
     "start_time": "2024-08-14T15:24:39.797053",
     "status": "completed"
    },
    "scrolled": true,
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Resampling from 512.000000 to 128.000000 Hz.\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "WARNING: All log messages before absl::InitializeLog() is called are written to STDERR\n",
      "I0000 00:00:1723649089.916976     175 device_compiler.h:186] Compiled cluster using XLA!  This line is logged at most once for the lifetime of the process.\n"
     ]
    }
   ],
   "source": [
    "sbj=43\n",
    "X, y = load_GIGA(sbj=sbj, **load_args)\n",
    "encoder = OneHotEncoder(sparse_output=True)\n",
    "y = encoder.fit_transform(y.reshape(-1,1)).toarray()\n",
    "\n",
    "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n",
    "\n",
    "model = KernelConvInceptionMI()\n",
    "\n",
    "history = model.fit(X_train,y_train, epochs=150, batch_size=32, verbose=0, validation_data=(X_test, y_test))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "32bab2c4",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-14T15:26:04.190103Z",
     "iopub.status.busy": "2024-08-14T15:26:04.189799Z",
     "iopub.status.idle": "2024-08-14T15:26:04.874332Z",
     "shell.execute_reply": "2024-08-14T15:26:04.873397Z"
    },
    "papermill": {
     "duration": 0.705913,
     "end_time": "2024-08-14T15:26:04.876648",
     "exception": false,
     "start_time": "2024-08-14T15:26:04.170735",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 800x400 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 800x400 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plot_training_history(history)"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "nvidiaTeslaT4",
   "dataSources": [
    {
     "datasetId": 3008205,
     "sourceId": 5175158,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 30747,
   "isGpuEnabled": true,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 176.315869,
   "end_time": "2024-08-14T15:26:07.896014",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2024-08-14T15:23:11.580145",
   "version": "2.5.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
